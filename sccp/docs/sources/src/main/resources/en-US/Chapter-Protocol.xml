<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter id="protocol">

	<title>Protocol</title>

	<section>
		<title>API</title>
		<section>
			<title>Stack</title>
			<para><acronym>SCCP</acronym>
				stack relies on
				<acronym>MTP</acronym>
				to provide transport. Stack interface is defined as follows:</para>
				<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.tcap.api;

import java.util.Properties;

public interface TCAPStack {

	/**
	 * Returns stack provider.
	 * @return
	 */
	public TCAPProvider getProvider();
	/**
	 * Stops this stack and transport layer(SCCP)
	 */
	public void stop();
	/**
	 * Start stack and transport layer(SCCP)
	 * @throws IllegalStateException - if stack is already running or not configured
	 * @throws StartFailedException
	 */
	public void start() throws IllegalStateException, StartFailedException;
	/**
	 * Configure stack and transport layer.
	 * @param properties
	 * @throws ConfigurationException
	 */
	public void configure(Properties properties) throws ConfigurationException;
}
				</programlisting>
		</section>
		<section>
			<title>Provider	</title>
			<para>
				Stack declares provider which allows user to access stack
				facilities,
				send messages statelesly and register listener. Provider
				is defined
				as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.sccp;

import java.io.IOException;
import java.util.Properties;

import org.mobicents.protocols.ConfigurationException;
import org.mobicents.protocols.ss7.mtp.RoutingLabel;
import org.mobicents.protocols.ss7.sccp.parameter.SccpAddress;

public interface SccpProvider {
	
	/**
	 * Sets sccp listener
	 * @param listener
	 */
	public void addSccpListener(SccpListener listener);

	/**
	 * Removes listener
	 */
	public void removeSccpListener(SccpListener listener);
	
	/**
	 * Send sccp byte[] to desired addres.
	 * @param calledParty - destination address of this message
	 * @param callingParty - local address
	 * @param data - byte[] encoded of sccp parameters
	 * @param ar - reference with mtp3 routing label
	 * @throws IOException
	 */
	public void send(SccpAddress calledParty, SccpAddress callingParty,
			byte[] data,RoutingLabel ar) throws IOException;//FIXME: add support for UDTs?

	/**
	 * UnitData factory instance.
	 * @return
	 */
	public SccpUnitDataFactory getUnitDataFactory();
	/**
	 * Parameter factory instance.
	 * @return
	 */
	public SccpParameterFactory getSccpParameterFactory();
	
	public void configure(Properties p) throws ConfigurationException;
}
		</programlisting>
			<para>
				Provider allows single listener to be registered with it. Listener
				is callled once proper
				<acronym>SCCP</acronym>
				message is received. Listener is defined as follows:
			</para>
			<programlisting language="Java" role="JAVA">
package org.mobicents.protocols.ss7.sccp;

import org.mobicents.protocols.ss7.mtp.ActionReference;
import org.mobicents.protocols.ss7.sccp.parameter.SccpAddress;

public interface SccpListener {
	/**
	 * Called when proper data is received, it is partially decoded. This method is called with message payload.
	 * @param calledPartyAddress - destination address
	 * @param callingPartyAddress - originating address
	 * @param data - payload of data unit
	 * @param backReference - reference to be passed to provider send method.
	 */
	public void onMessage(SccpAddress calledPartyAddress, SccpAddress callingPartyAddress, byte[] data, ActionReference backReference);
	/**
	 * Called when underlying link goes down.
	 */
	public void linkDown();
	/**
	 * Called when underlying link goes up.
	 */
	public void linkUp();

}
		</programlisting>
		</section>
		<section>
			<title>SCCP Factory</title>
			<para>
				Concrete provider instances are created by means of
				<literal>SccpFactory</literal>
				. Factory class:
				<literal>org.mobicents.protocols.ss7.sccp.SccpFactory</literal>
				declares single method:
				<literal>public SccpProvider getProvider( Properties properties)
				</literal>
				.
			</para>
			<para>
				Where passed properties contain configuration properties listed in
				<xref linkend="sccp_configuration" />
				and provider specific options.
			</para>
		</section>
		<section id="sccp_providers">
			<title>Supported providers</title>
			<para>
				<acronym>SCCP</acronym>
				supports following providers:
			</para>
			<table frame="all" pgwide="1">
				<title>Providers</title>
				<tgroup colsep="1" cols="3">
					<colspec colnum="1" colname="c0" />
					<colspec colnum="2" colname="c1" />
					<colspec colnum="3" colname="c2" />
					<thead>
						<row>
							<entry>driver name</entry>
							<entry>Description</entry>
							<entry>Configuration</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>default</entry>
							<entry>
								Default provider which relies on &THIS.PLATFORM; MTP provider. 
							</entry>
							<entry>
								Refer to MTP provider configuration.
							</entry>
						</row>
						<row>
							<entry>intel_hdc</entry>
							<entry></entry>
							<entry></entry>
						</row>
						
					</tbody>
				</tgroup>
			</table>
		</section>
	</section>
	<section id="sccp_configuration">
		<title>Configuration</title>
		<para> Each provider supports following configuration properties:
		</para>
		<table frame="all" pgwide="1">
			<title>Common Configuration Properties</title>
			<tgroup colsep="1" cols="4">
				<colspec colnum="1" colname="c0" />
				<colspec colnum="2" colname="c1" />
				<colspec colnum="3" colname="c2" />
				<colspec colnum="4" colname="c3" />
				<thead>
					<row>
						<entry>Property Name</entry>
						<entry>Description</entry>
						<entry>Property Type</entry>
						<entry>Default Value</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>sccp.provider</entry>
						<entry>
							Configures provider for this stack. It can contain one of predefined values or class name.
						</entry>
						<entry>java.lang.String</entry>
						<entry>default</entry>
					</row>
					<row>
						<entry>sccp.dpc</entry>
						<entry>Default DPC used by ISUP layer for originating messages
						</entry>
						<entry>java.lang.String</entry>
						<entry></entry>
					</row>
					<row>
						<entry>sccp.opc</entry>
						<entry>Default OPC used by ISUP layer for originating messages
						</entry>
						<entry>java.lang.String</entry>
						<entry></entry>
					</row>
					<row>
						<entry>sccp.sls</entry>
						<entry>Default SLS used by ISUP layer for originating messages
						</entry>
						<entry>java.lang.String</entry>
						<entry></entry>
					</row>
					<row>
						<entry>sccp.ssi</entry>
						<entry>Default SSI used by ISUP layer for originating messages
						</entry>
						<entry>java.lang.String</entry>
						<entry></entry>
					</row>
				</tbody>
			</tgroup>
		</table>

	</section>
	<section>
		<title>Example</title>
		<para></para>
		<programlisting language="Java" role="JAVA">

Properties properties = new Properties();
//mtp/sccp - name is the same
properties.put("sccp.provider","default");
//mtp properties
properties.put("mtp.driver","m3ua");
properties.put("mtp.address.remote","192.168.1.1");
properties.put("mtp.address.local","192.168.1.202");
//sccp
properties.put("sccp.opc","12345");
properties.put("sccp.dpc","5641");
properties.put("sccp.sls","0");
properties.put("sccp.ssi","0");


SccProvider sccpProvider = SccpFactory.getInstance().getProvider(properties);
sccpProvider.setListener(...);

SccpParameterFactory paramFactory = sccpProvider.getSccpParameterFactory();
SccpUnitDataFactory udFactory = sccpProvider.getSccpUnitDataFactory();

SccpAddress peer1Address =  paramFactory.getSccpAddress();
GlobalTitle gt = paramFactory.getGlobalTitle100();

gt.setDigits("5557779");
peer1Address.setGlobalTitle(gt);
peer1Address.setGlobalTitleIndicator(4);//for GT 100

SccpAddress peer2Address = paramFactory.getSccpAddress();
gt = paramFactory.getGlobalTitle100();

gt.setDigits("5888879");
peer2Address.setGlobalTitle(gt);
peer2Address.setGlobalTitleIndicator(4);//for GT 100

byte[] tcapData = ....;
// ActionReference is null, its originating call, defaults from conf will be used.
sccpProvider.send(peer1,peer2,tcapData,null); 
		</programlisting>

	</section>
</chapter>

