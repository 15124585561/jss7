<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter id="protocol">

	<title>Protocol</title>

	<section>
		<title>API</title>
		<section>
			<title>TCAP Dialog overview</title>
			<para>
				<literal>TCAPDialog</literal>
				is a class representing two
				TCAP
				transactions (remote and local transaction form logical dialog).
				Messages (primitives) are exchanged by means of this class. It is
				defined by the following interface:
			</para>
			<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.api.tc.dialog;



public interface Dialog {

	public Long getDialogId();

	public SccpAddress getLocalAddress();

	public SccpAddress getRemoteAddress();

	public ApplicationContextName getApplicationContextName();

	public UserInformation getUserInformation();

	public Long getNewInvokeId() throws TCAPException;

	public boolean cancelInvocation(Long invokeId) throws TCAPException;

	public boolean isEstabilished();

	public boolean isStructured();

	public void sendComponent(Component componentRequest) throws TCAPSendException;

	public void send(TCBeginRequest event) throws TCAPSendException;

	public void send(TCContinueRequest event) throws TCAPSendException;

	public void send(TCEndRequest event) throws TCAPSendException;

	public void send(TCUserAbortRequest event) throws TCAPSendException;

	public void send(TCUniRequest event) throws TCAPSendException;

	public void release();

	public void resetTimer(Long invokeId) throws TCAPException;

	public void keepAlive();

	public TRPseudoState getState();

}]]>
		  	</programlisting>
			<important>
				<para>
					<literal>Application Context</literal>, 
					<literal>User Information</literal>
					and negotiation process is described in Q.771.
					<literal>Application Context</literal>
					and
					<literal>User Information</literal>
					are user specific and identify the capabilities of peer establishing
					dialog.
				</para>
			</important>
			<para>Defined method have following description:</para>
			<variablelist>
				<varlistentry>
					<term>public Long getDialogId();</term>
					<listitem>
						<para>returns this dialog ID. It MUST be unique at any given time in local stack.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public SccpAddress getLocalAddress();</term>
					<listitem>
						<para>returns local SCCP address which identifies resource receveing message.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public SccpAddress getRemoteAddress();</term>
					<listitem>
						<para>returns remote SCCP address to which messages are routed.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public ApplicationContextName getApplicationContextName();</term>
					<listitem>
						<para>returns application context used by this dialog.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public UserInformation getUserInformation();</term>
					<listitem>
						<para>returns user information exchanged in this dialog.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public Long getNewInvokeId() throws TCAPException;</term>
					<listitem>
						<para>returns invoke ID which is to be used as ID for INVOKE component. If there is no free ID in this dialog space, it returns null.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public boolean cancelInvocation(Long invokeId) throws TCAPException;</term>
					<listitem>
						<para>cancels invoke operation. This effectivly releases all resources associated with invoke ID and returns said ID to pool of available IDs.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public boolean isEstabilished();</term>
					<listitem>
						<para>checks if dialog has been established end to end, that is, if there is atleast one TC_CONTINUE exchanged.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public boolean isStructured();</term>
					<listitem>
						<para>checks if dialog is structured or not.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void sendComponent(Component componentRequest) throws TCAPSendException;</term>
					<listitem>
						<para>schedules component for send operation. Components are stored until one of message primitives is issued, ie. TC_BEGIN</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void send(TCBeginRequest event) throws TCAPSendException;</term>
					<listitem>
						<para>sends initial message(TC_BEGIN). All scheduled components are sent along with it.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void send(TCContinueRequest event) throws TCAPSendException;</term>
					<listitem>
						<para>sends intermediate message(TC_CONTINUE). All scheduled components are sent along with it.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void send(TCEndRequest event) throws TCAPSendException;</term>
					<listitem>
						<para>sends final message(TC_END). All scheduled components are sent along with it.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void send(TCUserAbortRequest event) throws TCAPSendException;</term>
					<listitem>
						<para>sends final message(TC_UAbort). All scheduled components are sent along with it.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void send(TCUniRequest event) throws TCAPSendException;</term>
					<listitem>
						<para>sends message allowed in unstructured dialogs. All scheduled components are sent along with it.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void release();</term>
					<listitem>
						<para>releases all resources associated with dialog.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void resetTimer(Long invokeId) throws TCAPException;</term>
					<listitem>
						<para>resets timer associated with TC_IVOKE action. Timer for Invoke starts when TC_INVOKE is sent, it is refreshed when component with matching Invoke ID is received.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void keepAlive();</term>
					<listitem>
						<para>this method is used to keep dialog alive. It is used on dialog timeout callback. If this method is called withing callback, dialog wont be removed after timing out, instead, timeout timer will be restarted.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public TRPseudoState getState();</term>
					<listitem>
						<para>returns current state of dialog.</para>
					</listitem>
				</varlistentry>
				
			</variablelist>
			<para>
				Each dialog has an associated state machine that it follows.
				As there are two
				types of dialogs, two machines are defined:
			</para>
      <figure>
        <title>TCAP Structured Dialog FSM</title>
        <mediaobject id="ss7_design_tcap_fsm_1">
          <imageobject>
            <imagedata width="300px" align="center"
              fileref="images/ss7-tcap-dialog-fsm1.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
      <figure>
        <title>TCAP Unstructured Dialog FSM</title>
        <mediaobject id="ss7_design_tcap_fsm_2">
          <imageobject>
            <imagedata width="300px" align="center"
              fileref="images/ss7-tcap-dialog-fsm2.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
			<para>Each
				dialog has an associated separate invoke ID space. This space includes
				all integer numbers from the set of &lt;-128,127&gt;. The invoke ID is a 
				reference number for the operation related components. Please refer to
				<xref linkend="operations" />
				for more details.
			</para>
		</section>
		<section id="operations">
			<title>Operation primitives
		  	</title>
			<note>
				<para>
					In
					TCAP,
					operation primitives are also referred to as
					<literal>Components</literal>
					.
				</para>
			</note>
			<para>Operation primitives are sent as a part of messages. Each
				primitive is scheduled in dialog and sent once the user request message
				is sent.
		  	</para>
			<para>The following primitives are defined: </para>
			<variablelist>
				<varlistentry>
					<term>Invoke</term>
					<listitem>
						<para>
							This element indicates that an operation's peer request is to be
							invoked.
							The TCAP
							user populates it with user specific
							OperationCodes
							and
							Parameters
							.
						</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
public interface Invoke extends Component{

	public InvokeClass getInvokeClass();

	public void setLinkedId(Long i);

	public Long getLinkedId();

	public void setOperationCode(OperationCode i);

	public OperationCode getOperationCode();

	public void setParameter(Parameter p);

	public Parameter getParameter();
}

package org.mobicents.protocols.ss7.tcap.api.tc.component;

/**
 * Class of invoke type, ref Q.771 2.3.1.3.
 * <ul>
 * <li>Class 1 – Both success and failure are reported.</li>
 * <li>Class 2 – Only failure is reported.</li>
 * <li>Class 3 – Only success is reported.</li>
 * <li>Class 4 – Neither success, nor failure is reported.</li>
 * <ul>
 * 
 */
public enum InvokeClass {

	Class1, Class2, Class3, Class4;
}
		  				]]>
		  				</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>ReturnResult</term>
					<listitem>
						<para>
							This element indicates a partial result of
							<literal>Invoke</literal>
							.
							The TCAP
							user populates it with user specific
							OperationCodes
							and
							Parameters
							.
						</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.asn.comp;

public interface ReturnResult extends ... {
	
	//opt all
	public void setOperationCode(OperationCode oc);
	public OperationCode getOperationCode();
	
	public void setParameter(Parameter p);
	public Parameter getParameter();
	
}
		  				]]>
		  				</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>ReturnResultLast</term>
					<listitem>
						<para>
							This element indicates the final result of
							<literal>Invoke</literal>
							. After this element is consumed, the 
							<literal>InvokeId</literal>
							associated with its operation is set free.
							The TCAP
							user populates it with user specific 
							OperationCodes
							and
							Parameters
							.
						</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.asn.comp;

public interface ReturnResult extends ... {
	
	//opt all
	public void setOperationCode(OperationCode oc);
	public OperationCode getOperationCode();
	
	public void setParameter(Parameter p);
	public Parameter getParameter();
	
}
		  				]]>
		  				</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Reject</term>
					<listitem>
						<para>
							This element indicates that the peer rejected
							<literal>Invoke</literal>
							. It contains the 
							<literal>Problem</literal>
							which indicates the cause of the rejection.
						</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.asn.comp;

import org.mobicents.protocols.asn.Tag;

public interface Reject extends Component {

	public Problem getProblem();
	public void setProblem(Problem p);
	
}
		  				]]>
		  				</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				All listed primitives can be scheduled to send with the dialog
				<literal>sendComponent</literal>
				method. Each extends the super interface for components:
			</para>
			<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.asn.comp;

import org.mobicents.protocols.asn.Tag;
import org.mobicents.protocols.ss7.tcap.asn.Encodable;

public interface Component extends Encodable{

	//this is doubled by each interface, 
	public void setInvokeId(Long i);
	public Long getInvokeId();
	
	public ComponentType getType();
	
}]]>
			</programlisting>
			<para>
				&THIS.APPLICATION;
				TCAP
				defines elements to convey user specific information inside
				operation primitives:
			</para>
			<variablelist>
				<varlistentry>
					<term>OperationCode</term>
					<listitem>
						<para>Contains information on user specific operation. It identifies
							this operation by code in user context.</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
import org.mobicents.protocols.asn.Tag;
import org.mobicents.protocols.ss7.tcap.asn.Encodable;

public interface OperationCode extends Encodable{

	public OperationCodeType getOperationType();
	
	public void setLocalOperationCode(Long localOperationCode);
	public void setGlobalOperationCode(long[] globalOperationCode);


	public Long getLocalOperationCode();
	public long[] getGlobalOperationCode();

}
		  				]]>
		  				</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Parameter</term>
					<listitem>
						<para>
							Container for user specific (encoded) parameter/s. Its content
							should be decoded in context to user context and
							<literal>OperationCode</literal>
							value.
						</para>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface Parameter extends Encodable {


	public byte[] getData();
	public void setData(byte[] b);

	public boolean isPrimitive();

	public void setPrimitive(boolean b);

	public int getTag();

	public void setTag(int tag);

	public int getTagClass();

	public void setTagClass(int tagClass);

	public Parameter[] getParameters();

	public void setParameters(Parameter[] paramss);

}
		  				]]>
		  				</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Problem</term>
					<listitem>
						<para>
							Contains information on the problem that occurred. It is part of the
							<literal>Reject</literal>
							component.
						</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.asn.comp;

import org.mobicents.protocols.ss7.tcap.asn.Encodable;

public interface Problem extends Encodable {


	public ProblemType getType();
	public void setType(ProblemType t);

	public void setGeneralProblemType(GeneralProblemType t);
	public GeneralProblemType getGeneralProblemType();
	
	public void setInvokeProblemType(InvokeProblemType t);
	public InvokeProblemType getInvokeProblemType();
	
	public void setReturnErrorProblemType(ReturnErrorProblemType t);
	public ReturnErrorProblemType getReturnErrorProblemType();
	
	public void setReturnResultProblemType(ReturnResultProblemType t);
	public ReturnResultProblemType getReturnResultProblemType();
	
	
}
		  				]]>
		  				</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>Operation primitives(components) are created by the factory defined as
				follows: </para>
			<programlisting language="Java" role="JAVA"><![CDATA[

public interface ComponentPrimitiveFactory {

	public Invoke createTCInvokeRequest();

	public Invoke createTCInvokeRequest(InvokeClass invokeClass);

	public Reject createTCRejectRequest();

	public ReturnResultLast createTCResultLastRequest();

	public ReturnResult createTCResultRequest();

	public ReturnError createTCReturnErrorRequest();

	public OperationCode createOperationCode();

	public ErrorCode createErrorCode();

	public Parameter createParameter();

	public Parameter createParameter(int tag, int tagClass, boolean isPrimitive);

	public Problem createProblem(ProblemType pt);
}]]>
		  	</programlisting>

		</section>
		<section>
			<title>Dialog primitives</title>
			<para>Dialog primitives are exchanged messages.
				Primitives are passed to the dialog object that forms the proper message
				from:</para>
			<itemizedlist>
				<listitem>
					<para>The primitive and information passed in it.</para>
				</listitem>
				<listitem>
					<para>The components scheduled in the dialog.</para>
				</listitem>
			</itemizedlist>
			<para>The message formed by dialog can be logicaly depicted as follows:
			</para>
      <figure>
        <title>TCAP message structure</title>
        <mediaobject id="ss7_design_tcap_dialog_message1">
          <imageobject>
            <imagedata width="300px" align="center"
              fileref="images/ss7-tcap-design-dialog-message1.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>

			<para>Each component eligible for passing to the dialog is a child of the
				following interface: </para>
			<programlisting language="Java" role="JAVA"><![CDATA[


public interface DialogRequest {

	public Dialog getDialog();

	public EventType getType();
	
}]]>
			</programlisting>
			<para>Each component eligible for passing as an indication to the listener
				is a child of the following interface: </para>
			<programlisting language="Java" role="JAVA"><![CDATA[

public interface DialogIndication {

	public Dialog getDialog();

	public Component[] getComponents();
	
	public EventType getType();
	
	public Byte getQos();
}]]>
			</programlisting>
			<para>Where method have following meaning:</para>
			<variablelist>
				<varlistentry>
					<term>public Dialog getDialog();</term>
					<listitem>
						<para>returns dialog on which this indication has been received.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public Component[] getComponents();</term>
					<listitem>
						<para>returns set of components which has been received with this indication.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public EventType getType();</term>
					<listitem>
						<para>returns type of event - Begin, Continue, etc.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public Byte getQos();</term>
					<listitem>
						<para>returns QOS indication associated by transport layer.</para>
					</listitem>
				</varlistentry>
				
				
			</variablelist>
			<para>TCAP
				defines the following primitives:
			</para>
			<variablelist>
				<varlistentry>
					<term>TCBegin</term>
					<listitem>
						<para>
							Exchanged as the initial message in a structured dialog. Starts the 
							negotiation of
							<literal>Application Context Name</literal>
							and
							<literal>User Information</literal>
							. Its interface is defined as follows:
						</para>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCBeginRequest extends DialogRequest {

	public void setQOS(Byte b) throws IllegalArgumentException;
	public Byte getQOS();

	//only getter, since we send via Dialog object, ID is ensured to be present.
	
	public SccpAddress getDestinationAddress();
	public void setDestinationAddress(SccpAddress dest);
	
	public SccpAddress getOriginatingAddress();
	public void setOriginatingAddress(SccpAddress dest);
	
	
	public ApplicationContextName getApplicationContextName();
	public void setApplicationContextName(ApplicationContextName acn);

	public UserInformation getUserInformation();	
	public void setUserInformation(UserInformation acn);
	
	
}


						]]>
						</programlisting>
						<programlisting language="Java" role="JAVA"><![CDATA[


public interface TCBeginIndication extends DialogIndication {

	public Byte getQOS();

	public ApplicationContextName getApplicationContextName();

	public UserInformation getUserInformation();

	public SccpAddress getDestinationAddress();

	public SccpAddress getOriginatingAddress();

}

						]]>
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TCContinue</term>
					<listitem>
						<para>Exchanged as an intermediate message until the dialog reaches its
							end. Its interface is defined as follows:</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.api.tc.dialog.events;

import org.mobicents.protocols.ss7.sccp.parameter.SccpAddress;
import org.mobicents.protocols.ss7.tcap.asn.ApplicationContextName;
import org.mobicents.protocols.ss7.tcap.asn.UserInformation;

public interface TCContinueRequest extends DialogRequest {

	public void setQOS(Byte b) throws IllegalArgumentException;

	public Byte getQOS();

	public SccpAddress getOriginatingAddress();

	public void setOriginatingAddress(SccpAddress dest);

	public ApplicationContextName getApplicationContextName();

	public void setApplicationContextName(ApplicationContextName acn);

	public UserInformation getUserInformation();

	public void setUserInformation(UserInformation acn);

}
						]]>
						</programlisting>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCContinueIndication extends DialogIndication {

	public Byte getQOS();

	public ApplicationContextName getApplicationContextName();

	public UserInformation getUserInformation();

	public SccpAddress getOriginatingAddress();
}
						]]>
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TCEnd</term>
					<listitem>
						<para>Sent to terminate the dialog (and two transactions associated
							with it). Its interface is defined as follows:</para>
						<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.api.tc.dialog.events;

import org.mobicents.protocols.ss7.tcap.asn.ApplicationContextName;
import org.mobicents.protocols.ss7.tcap.asn.UserInformation;


public interface TCEndRequest extends DialogRequest {

	public void setQOS(Byte b) throws IllegalArgumentException;

	public Byte getQOS();

	public ApplicationContextName getApplicationContextName();

	public void setApplicationContextName(ApplicationContextName acn);

	public UserInformation getUserInformation();

	public void setUserInformation(UserInformation acn);

	public void setTermination(TerminationType t);

	public TerminationType getTerminationType();
}
						]]>
						</programlisting>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCEndIndication extends DialogIndication {

	public Byte getQOS();

	// parts from DialogPortion, if present
	public ApplicationContextName getApplicationContextName();

	public UserInformation getUserInformation();

}
						]]>
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TCUserAbort</term>
					<listitem>
						<para>Sent to abort the dialog being created, or an ongoing one. Its
							interface is defined as follows:</para>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCUserAbortRequest extends DialogRequest {

	public void setQOS(Byte b) throws IllegalArgumentException;

	public Byte getQOS();

	public ApplicationContextName getApplicationContextName();

	public void setApplicationContextName(ApplicationContextName acn);

	public UserInformation getUserInformation();

	public void setUserInformation(UserInformation acn);

}
						]]>
						</programlisting>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCUserAbortIndication extends DialogIndication {

	public UserInformation getUserInformation();

	public AbortSource getAbortSource();

}
						]]>
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TCPAbort</term>
					<listitem>
						<para>Sent to abort the dialog being created or an ongoing one. It is
							sent by the provider, and indicates the problem on the transport or stack
							layer. Its interface is defined as follows:</para>

						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCPAbortIndication extends DialogIndication{

	//mandatory
	public PAbortCauseType getPAbortCause();
}

						]]>
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TCUni</term>
					<listitem>
						<para>Only message available for unstructured dialog. Its
							interface is defined as follows:</para>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCUniRequest extends DialogRequest {

	public void setQOS(Byte b) throws IllegalArgumentException;

	public Byte getQOS();

	public SccpAddress getDestinationAddress();

	public void setDestinationAddress(SccpAddress dest);

	public SccpAddress getOriginatingAddress();

	public void setOriginatingAddress(SccpAddress dest);

	public ApplicationContextName getApplicationContextName();

	public void setApplicationContextName(ApplicationContextName acn);

	public UserInformation getUserInformation();

	public void setUserInformation(UserInformation acn);

}
						]]>
						</programlisting>
						<programlisting language="Java" role="JAVA"><![CDATA[

public interface TCUniIndication extends DialogIndication {

	public Byte getQOS();

	public ApplicationContextName getApplicationContextName();

	public UserInformation getUserInformation();

	public SccpAddress getDestinationAddress();

	public SccpAddress getOriginatingAddress();
}
						]]>
						</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>Dialog primitives define following method:</para>
			<variablelist>
				<varlistentry>
					<term>public void setQOS(Byte b) throws IllegalArgumentException;</term>
					<listitem>
						<para>sets requested value of QOS for transport layer.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void setDestinationAddress(SccpAddress dest);</term>
					<listitem>
						<para>sets destination address of resource to which message should be routed.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public SccpAddress getDestinationAddress();</term>
					<listitem>
						<para>returns destination address to which this primitve will be routed
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void setOriginatingAddress(SccpAddress dest);</term>
					<listitem>
						<para>sets origin point address, to this address remote end will send back subsequent messages.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public SccpAddress getOriginatingAddress();</term>
					<listitem>
						<para>returns origin address.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void setApplicationContextName(ApplicationContextName acn);</term>
					<listitem>
						<para>sets application context which will be sent as part of primitive.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public ApplicationContextName getApplicationContextName();</term>
					<listitem>
						<para>returns application context sent as part of primitive.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void setUserInformation(UserInformation acn);</term>
					<listitem>
						<para>sets user information which will be sent as part of primitive.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public UserInformation getUserInformation();</term>
					<listitem>
						<para>returns user information which is part of this primitive.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public void setTermination(TerminationType t);</term>
					<listitem>
						<para>sets type of termination in TC_END primitive.
						</para>	
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>public TerminationType getTerminationType();</term>
					<listitem>
						<para>returns type of termination.
						</para>	
					</listitem>
				</varlistentry>
				
				
			</variablelist>
			<para>Dialog primitives are created (as components) by means of a
				factory. The factory is defined as follows:</para>
			<programlisting language="Java" role="JAVA"><![CDATA[

public interface DialogPrimitiveFactory {

	public TCBeginRequest createBegin(Dialog d);

	public TCContinueRequest createContinue(Dialog d);

	public TCEndRequest createEnd(Dialog d);

	public TCUserAbortRequest createUAbort(Dialog d);
	
	public TCUniRequest createUni(Dialog d);
	
	public ApplicationContextName createApplicationContextName(long[] oid);
	
	public UserInformation createUserInformation();
	
}]]>
				</programlisting>
		</section>

		<section>
			<title>Stack</title>
			<para>
				TCAP
				is part of the 
				SS7
				protocol stack. It relies on
				SCCP
				as a means of transport. To create the 
				TCAP
				stack, the SCCP layer must be properly configured.
				Please refer to
				<xref linkend="tcap_configuration" />
				for details.
			</para>
			<para>&THIS.PLATFORM;
				TCAP
				is defined by the provider and
				<literal>stack</literal>
				interfaces.
				The interfaces are defined as follows:
			</para>
			<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.protocols.ss7.tcap.api;

public interface TCAPStack {

	public TCAPProvider getProvider();

	public void stop();

	public void start() throws IllegalStateException;

	public void setDialogIdleTimeout(long l);

	public long getDialogIdleTimeout();
	
	public void setInvokeTimeout(long v); 

	public long getInvokeTimeout();
}
]]>
				</programlisting>
				<variablelist>
					<varlistentry>
						<term>public TCAPProvider getProvider();
						</term>
						<listitem>
							<para>returns provider implementation.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void stop();</term>
						<listitem>
							<para>stops stack.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void start() throws IllegalStateException;</term>
						<listitem>
							<para>starts stack and underlying resources.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void setDialogIdleTimeout(long l);</term>
						<listitem>
							<para>sets millisecond value which indicates how long dialog can be idle, that is dont receive or send primitives. If this value is equal to zero. Dialogs dont dime out.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public long getDialogIdleTimeout();</term>
						<listitem>
							<para>returns dialog timeout value.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void setInvokeTimeout(long v); </term>
						<listitem>
							<para>sets timeout value similar to one for dialogs. This value is used to indicated how long TC_INVOKE components may linger in dialog without any activity.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public long getInvokeTimeout();</term>
						<listitem>
							<para>return invoke timeout value.</para>
						</listitem>
					</varlistentry>
					
				</variablelist>
			<programlisting language="Java" role="JAVA"><![CDATA[			
package org.mobicents.protocols.ss7.tcap.api;

import org.mobicents.protocols.ss7.sccp.parameter.SccpAddress;
import org.mobicents.protocols.ss7.tcap.api.tc.dialog.Dialog;

public interface TCAPProvider {

	public Dialog getNewDialog(SccpAddress localAddress, SccpAddress remoteAddress) throws TCAPException;
	public Dialog getNewUnstructuredDialog(SccpAddress localAddress, SccpAddress remoteAddress) throws TCAPException;

	public DialogPrimitiveFactory getDialogPrimitiveFactory();
	public ComponentPrimitiveFactory getComponentPrimitiveFactory();
	
	public void addTCListener(TCListener lst);
	public void removeTCListener(TCListener lst);
}]]>
				</programlisting>
			<para>The provider allows the user to access stack facilities, create
				dialogs and register as the listener for incoming messages. 
				</para>
				<variablelist>
					<varlistentry>
						<term>public Dialog getNewDialog(SccpAddress localAddress, SccpAddress remoteAddress) throws TCAPException;</term>
						<listitem>
							<para>creates new structured dialog.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public Dialog getNewUnstructuredDialog(SccpAddress localAddress, SccpAddress remoteAddress) throws TCAPException;</term>
						<listitem>
							<para>creates new unstructured dialog.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public DialogPrimitiveFactory getDialogPrimitiveFactory();</term>
						<listitem>
							<para>returns implementation of dialog primitive factory.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public ComponentPrimitiveFactory getComponentPrimitiveFactory();</term>
						<listitem>
							<para>return implementation of component primitive factory.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void addTCListener(TCListener lst);</term>
						<listitem>
							<para>registers new TC listener in stack.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void removeTCListener(TCListener lst);</term>
						<listitem>
							<para>removes TC listener from stack.</para>
						</listitem>
					</varlistentry>
				
				</variablelist>
				<para>The listener
				declares a set of callbacks methods.
				It is defined as follows: </para>
			<programlisting language="Java" role="JAVA"><![CDATA[	

public interface TCListener {

	public void onTCUni(TCUniIndication ind);

	public void onTCBegin(TCBeginIndication ind);

	public void onTCContinue(TCContinueIndication ind);

	public void onTCEnd(TCEndIndication ind);

	public void onTCUserAbort(TCUserAbortIndication ind);

	public void onTCPAbort(TCPAbortIndication ind);

	public void onDialogReleased(Dialog d);

	public void onInvokeTimeout(Invoke tcInvokeRequest);

	public void onDialogTimeout(Dialog d);

}

				]]>
				</programlisting>
				<variablelist>
					<varlistentry>
						<term>public void onTCUni(TCUniIndication ind);</term>
						<listitem>	
							<para>Invoked for TC_UNI. See Q.771 3.1.2.2.2.1</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onTCBegin(TCBeginIndication ind);</term>
						<listitem>	
							<para>Invoked for TC_BEGIN. See Q.771 3.1.2.2.2.1</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onTCContinue(TCContinueIndication ind);</term>
						<listitem>	
							<para>Invoked for TC_CONTINUE dialog primitive. See Q.771 3.1.2.2.2.2/3.1.2.2.2.3</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onTCEnd(TCEndIndication ind);</term>
						<listitem>	
							<para>Invoked for TC_END dialog primitive. See Q.771 3.1.2.2.2.4</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onTCUserAbort(TCUserAbortIndication ind);</term>
						<listitem>	
							<para>Invoked for TC-U-Abort primitive(P-Abort-Cause is present.). See Q.771 3.1.2.2.2.4</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onTCPAbort(TCPAbortIndication ind);</term>
						<listitem>	
							<para>Invoked when dialog has been terminated by some unpredicatable environment cause. See Q.771 3.1.4.2</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onDialogReleased(Dialog d);</term>
						<listitem>	
							<para>Called once dialog is released. It is invoked once primitives are delivered. Indicates that stack has no reference, and dialog object is
 considered invalid.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onDialogTimeout(Dialog d);</term>
						<listitem>	
							<para>Called once dialog times out. Once this method is called, dialog cant be used anymore. Unless Dialog.keepAlive method is called.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>public void onInvokeTimeout(Invoke d);</term>
						<listitem>	
							<para>Called once invoke times out. </para>
						</listitem>
					</varlistentry>
				</variablelist>
		</section>
	</section>

	<section id="tcap_configuration">
		<title>Configuration</title>
		<para>
			The TCAP
			layer does not require any configuration. However, it requires SCCP and its sublayers to be properly set. Please refer to the <literal>SCCP User Guide</literal> for supported configuration options.
		</para>
		<section>
			<title>Dependencies</title>
			<para>
				TCAP
				depends on the following:
			</para>
			<itemizedlist>
				<listitem>
					<para>MTP</para>
				</listitem>
				<listitem>
					<para>SCCP</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	<section>
		<title>Example</title>
		<para></para>
		<programlisting language="Java" role="JAVA"><![CDATA[	
		
public class Client implements TCListener{
	//encoded Application Context Name
	public static final long[] _ACN_ = new long[] { 0, 4, 0, 0, 1, 0, 19, 2 };
	
	private TCAPStack stack;
	private SccpAddress thisAddress;
	private SccpAddress remoteAddress;
	
	private TCAPProvider tcapProvider;


	
	private Dialog clientDialog;
	
	Client(SccpProvider sccpPprovider, SccpAddress thisAddress,SccpAddress remoteAddress) {
		super();
		this.stack = new TCAPStackImpl(sccpPprovider);
		this.runningTestCase = runningTestCase;
		this.thisAddress = thisAddress;
		this.remoteAddress = remoteAddress;
		this.tcapProvider = this.stack.getProvider();
		this.tcapProvider.addTCListener(this);
	}

	public void start() throws TCAPException, TCAPSendException
	{
		clientDialog = this.tcapProvider.getNewDialog(thisAddress, remoteAddress);
		ComponentPrimitiveFactory cpFactory = this.tcapProvider.getComponentPrimitiveFactory();
		
		//create some INVOKE
		Invoke invoke = cpFactory.createTCInvokeRequest();
		invoke.setInvokeId(this.clientDialog.getNewInvokeId());
		
		invoke.setOperationCode(cpFactory.createOperationCode(true,new Long(12)));
		//no parameter
		this.clientDialog.sendComponent(invoke);
		
		ApplicationContextName acn = this.tcapProvider.getDialogPrimitiveFactory()
			.createApplicationContextName(_ACN_);
		//UI is optional!
		TCBeginRequest tcbr = this.tcapProvider.getDialogPrimitiveFactory().createBegin(this.clientDialog);
		tcbr.setApplicationContextName(acn);
		this.clientDialog.send(tcbr);
	}
	
	public void dialogReleased(Dialog d) {
	
		
	}

	public void onInvokeTimeout(Invoke tcInvokeRequest) {
	
	}

	public void onTCBegin(TCBeginIndication ind) {
		
		
	}

	public void onTCContinue(TCContinueIndication ind) {

		//send end
		TCEndRequest end = this.tcapProvider.getDialogPrimitiveFactory().createEnd(ind.getDialog());
		end.setTermination(TerminationType.Basic);
		try {
			ind.getDialog().send(end);
			
		} catch (TCAPSendException e) {
			throw new RuntimeException(e);
		}
	}

	public void onTCEnd(TCEndIndication ind) {
		//should not happen, in this scenario, we send data.
	}

	public void onTCUni(TCUniIndication ind) {
		//not going to happen
	
	}


	public void onTCPAbort(TCPAbortIndication ind) {
		// TODO Auto-generated method stub
		
	}

	public void onTCUserAbort(TCUserAbortIndication ind) {
		// TODO Auto-generated method stub
		
	}
	
	
}

		]]>
		</programlisting>
	</section>
</chapter>

