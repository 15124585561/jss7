<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter
	id="map">

	<title>MAP</title>

	<para>
		Mobile application part (<acronym>MAP</acronym>) is the protocol that is used to allow the
		<acronym>GSM</acronym> network nodes within the Network Switching Subsystem (<acronym>NSS</acronym>
		) to communicate with each other to provide services, such as roaming capability,
		text messaging (<acronym>SMS</acronym>), Unstructured Supplementary Service Data (
		<acronym>USSD</acronym>) and subscriber authentication. <acronym>MAP</acronym>
		provides an application layer on which to build the services that support a
		<acronym>GSM</acronym> network. This application layer provides a standardized set of services.
		<acronym>MAP</acronym> uses the services of the <acronym>SS7</acronym>
		network, specifically the Signaling Connection Control Part (<acronym>SCCP</acronym>
		) and the Transaction Capabilities Application Part (<acronym>TCAP</acronym>)
	</para>
	<important>
		<para>For better understanding of this chapter please read GSM 09.02.</para>
	</important>
	<note>
		<para>&THIS.PLATFORM; &THIS.APPLICATION;
				MAP has implementation for USSD, SMS and Location Management Service (LMS) Messages only. Any contribution to implement
				other messages are welcome. We will provide you all the help that you may need initially.
		</para>
	</note>
	<section
		id="map_usage">
		<title>&THIS.APPLICATION; MAP 
		</title>
		<para>
			The <classname>org.mobicents.protocols.ss7.map.api.MAPStack</classname>
			interface defines the methods required to represent MAP Protocol Stack.
			MAPStack exposes <classname>org.mobicents.protocols.ss7.map.api.MAPProvider</classname>
			that interacts directly with MAPStack. This interface
			defines the methods that will be used by any registered MAP User application implementing the
			<classname>org.mobicents.protocols.ss7.map.api.MAPDialogListener</classname>
			and
			<classname>org.mobicents.protocols.ss7.map.api.MAPServiceListener</classname>
			interface to listen MAP messages and dialogue handling primitives. 
		</para>
		
		<para>
			Each MAP-User interested in listening messages specific to MAP Service implements specific <classname>MAPServiceListener</classname>.
			<itemizedlist> 
				<listitem>
					<para>
						MAP-User interested only in USSD messages implements <classname>org.mobicents.protocols.ss7.map.api.service.supplementary.MAPServiceSupplementaryListener</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						MAP-User interested only in SMS messages implements <classname>org.mobicents.protocols.ss7.map.api.service.sms.MAPServiceSmsListener</classname>
					</para>
				</listitem>
					<listitem>
					<para>
						MAP-User interested only in USSD messages implements <classname>org.mobicents.protocols.ss7.map.api.service.lsm.MAPServiceLsmListener</classname>
					</para>
				</listitem>				
			</itemizedlist>
			MAP-User interested in all the services may implement all the service listener class.
		</para>
		<!--  <para>
		The class diagram looks like
		</para>
		<mediaobject
			id="map_classdia">
			<imageobject>
				<imagedata
					width="300px"
					align="center"
					fileref="images/MapClassDiagram.png"
					format="PNG" />
			</imageobject>
			<caption>
				<para>&THIS.PLATFORM; &THIS.APPLICATION;
					MAP Class Diagram
				</para>
			</caption>
		</mediaobject>
		 -->


		<para>
			The <classname>org.mobicents.protocols.ss7.map.MAPStackImpl</classname>
			is concrete implementation of <classname>MAPStack</classname>.
			The MAP User application creates instance of <classname>MAPStackImpl</classname>
			passing the reference of <classname>SccpProvider</classname> and
			Sub System Number. All incoming messages are checked for destination SSN, if it matches with the one registered with this <classname>MAPStackImpl</classname>
			the corresponding listener is called else the peer receives error.
		</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[SccpProvider sccpProvider = getSccpProvider(); //JNDI lookup of SCCP Stack and get Provider
        MAPStackImpl mapStack = new MAPStackImpl(sccpPprovider, 8);
        ...]]>
		</programlisting>

		<para>
			The reference to <classname>SccpProvider</classname> is received from <classname>SccpStack</classname>.
			To get handle to <classname>SccpStack</classname> do the JNDI look-up passing the JNDI name configured in SS7 service as explained in
			<xref linkend="sccp_access_point" />
		</para>

		<para>
			The MAP User application should register the concrete implementation of <classname>MAPDialogListener</classname> with 
			<classname>MAPProvider</classname> to listen for incoming MAP Dialog and MAP Primitive messages.
		</para>
		
		<para>
			The MAP User application should register the concrete implementation of <classname>MAPServiceListener</classname> with 
			corresponding <classname>MAPServiceBase</classname> to listen for incoming MAP Service messages. Following <classname>MAPServiceBase</classname>
			are exposed by <classname>MAPProvider</classname>
			<itemizedlist>
				<listitem>
					<para>For LSM service <classname>org.mobicents.protocols.ss7.map.api.service.lsm.MAPServiceLsm</classname></para>
				</listitem>
				<listitem>
					<para>For SMS service <classname>org.mobicents.protocols.ss7.map.api.service.sms.MAPServiceSms</classname></para>
				</listitem>
				<listitem>
					<para>For USSD service <classname>org.mobicents.protocols.ss7.map.api.service.supplementary.MAPServiceSupplementary</classname></para>
				</listitem>								
			</itemizedlist>
		</para>
		
		

		<programlisting language="Java" role="JAVA"><![CDATA[
public class MAPExample implements MAPDialogListener, MAPServiceSupplementaryListener {
		.....		
		mapProvider = mapStack.getMAPProvider();
        mapProvider.addMAPDialogListener(this);
        mapProvider.getMAPServiceSupplementary().addMAPServiceListener(this);
        ....
} ]]>
	</programlisting>
	
		<para>Before any MAP specific service can be used, the corresponding service should be activated</para>
		
		<programlisting language="Java" role="JAVA"><![CDATA[
		.....		
		// Make the supplimentary service activated
		mapProvider.getMAPServiceSupplementary().acivate();
        ....]]>
	</programlisting>		

		<para>
			The MAP User Application leverages <classname>MapServiceFactory</classname> to create instance of <classname>USSDString</classname>
			and <classname>AddressString</classname>
		</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
		MapServiceFactory servFact = mapProvider.getMapServiceFactory();
        USSDString ussdString = servFact.createUSSDString("*125*+31628839999#",
                null);

        AddressString msisdn = this.servFact.createAddressString(
                AddressNature.international_number, NumberingPlan.ISDN,
                "31628838002");]]>
	</programlisting>

		<para>
			The MAP User Application leverages specific <classname>MAPServiceBase</classname> to create new <classname>MAPDialog</classname>
			and send message
		</para>

		<programlisting language="Java" role="JAVA"><![CDATA[
		// First create Dialog
		MAPDialogSupplementary mapDialog = mapProvider.getMAPServiceSupplementary().createNewDialog(
				MAPApplicationContext.getInstance(MAPApplicationContextName.networkUnstructuredSsContext, MAPApplicationContextVersion.version2), destAddress,
				destReference, origAddress, origReference);

		// The dataCodingScheme is still byte, as I am not exactly getting how
		// to encode/decode this.
		byte ussdDataCodingScheme = 0x0f;

		// USSD String: *125*+31628839999#
		// The Charset is null, here we let system use default Charset (UTF-7 as
		// explained in GSM 03.38. However if MAP User wants, it can set its own
		// impl of Charset
		USSDString ussdString = servFact.createUSSDString("*125*+31628839999#", null);

		AddressString msisdn = this.servFact.createAddressString(AddressNature.international_number,
				NumberingPlan.ISDN, "31628838002");

		mapDialog.addProcessUnstructuredSSRequest(ussdDataCodingScheme, ussdString, msisdn);

		// This will initiate the TC-BEGIN with INVOKE component
		mapDialog.send();]]>
	</programlisting>

	</section>
	<section
		id="map_usage_example"> 
		<title>&THIS.APPLICATION; MAP Usage</title>
		<para>The complete example looks like</para>

		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
public class MAPExample implements MAPDialogListener, MAPServiceSupplementaryListener {

	private MAPStack mapStack;
	private MAPProvider mapProvider;

	MapServiceFactory servFact;

	SccpAddress destAddress = null;

	// The address created by passing the AddressNature, NumberingPlan and
	// actual address
	AddressString destReference = servFact.createAddressString(AddressNature.international_number,
			NumberingPlan.land_mobile, "204208300008002");

	SccpAddress origAddress = null;

	AddressString origReference = servFact.createAddressString(AddressNature.international_number, NumberingPlan.ISDN,
			"31628968300");

	MAPExample(SccpProvider sccpPprovider, SccpAddress address, SccpAddress remoteAddress) {
		origAddress = address;
		destAddress = remoteAddress;

		mapStack = new MAPStackImpl(sccpPprovider, 8);
		mapProvider = mapStack.getMAPProvider();
		servFact = mapProvider.getMapServiceFactory();

		mapProvider.addMAPDialogListener(this);
		mapProvider.getMAPServiceSupplementary().addMAPServiceListener(this);
	}

	private static SccpProvider getSccpProvider() throws NamingException {

		// no arg is ok, if we run in JBoss
		InitialContext ctx = new InitialContext();
		try {
			String providerJndiName = "/mobicents/ss7/sccp";
			return ((SccpStack) ctx.lookup(providerJndiName)).getSccpProvider();

		} finally {
			ctx.close();
		}
	}

	private static SccpAddress createLocalAddress() {
		return new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 1, null, 8);
	}

	private static SccpAddress createRemoteAddress() {
		return new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 2, null, 8);
	}

	public void run() throws Exception {

		// Make the supplimentary service activated
		mapProvider.getMAPServiceSupplementary().acivate();

		// First create Dialog
		MAPDialogSupplementary mapDialog = mapProvider.getMAPServiceSupplementary().createNewDialog(
				MAPApplicationContext.getInstance(MAPApplicationContextName.networkUnstructuredSsContext, MAPApplicationContextVersion.version2), destAddress,
				destReference, origAddress, origReference);

		// The dataCodingScheme is still byte, as I am not exactly getting how
		// to encode/decode this.
		byte ussdDataCodingScheme = 0x0f;

		// USSD String: *125*+31628839999#
		// The Charset is null, here we let system use default Charset (UTF-7 as
		// explained in GSM 03.38. However if MAP User wants, it can set its own
		// impl of Charset
		USSDString ussdString = servFact.createUSSDString("*125*+31628839999#", null);

		AddressString msisdn = this.servFact.createAddressString(AddressNature.international_number,
				NumberingPlan.ISDN, "31628838002");

		mapDialog.addProcessUnstructuredSSRequest(ussdDataCodingScheme, ussdString, msisdn);

		// This will initiate the TC-BEGIN with INVOKE component
		mapDialog.send();
	}

	public void onProcessUnstructuredSSIndication(ProcessUnstructuredSSIndication procUnstrInd) {
		// TODO Auto-generated method stub

	}

	public void onUnstructuredSSIndication(UnstructuredSSIndication unstrInd) {
		// TODO Auto-generated method stub

	}

	public static void main(String[] args) throws Exception {
		SccpProvider sccpProvider = getSccpProvider(); // JNDI lookup of SCCP

		SccpAddress localAddress = createLocalAddress();
		SccpAddress remoteAddress = createRemoteAddress();

		MAPExample example = new MAPExample(sccpProvider, localAddress, remoteAddress);

		example.run();

	}

	@Override
	public void onDialogRequest(MAPDialog mapDialog, AddressString destReference, AddressString origReference,
			MAPExtensionContainer extensionContainer) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDialogAccept(MAPDialog mapDialog, MAPExtensionContainer extensionContainer) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDialogReject(MAPDialog mapDialog, MAPRefuseReason refuseReason, MAPProviderError providerError,
			ApplicationContextName alternativeApplicationContext, MAPExtensionContainer extensionContainer) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDialogUserAbort(MAPDialog mapDialog, MAPUserAbortChoice userReason,
			MAPExtensionContainer extensionContainer) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDialogProviderAbort(MAPDialog mapDialog, MAPAbortProviderReason abortProviderReason,
			MAPAbortSource abortSource, MAPExtensionContainer extensionContainer) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDialogClose(MAPDialog mapDialog) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDialogDelimiter(MAPDialog mapDialog) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onDialogNotice(MAPDialog mapDialog, MAPNoticeProblemDiagnostic noticeProblemDiagnostic) {
		// TODO Auto-generated method stub

	}

	public void onDialogResease(MAPDialog mapDialog) {
		
	}

	@Override
	public void onDialogTimeout(MAPDialog mapDialog) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onErrorComponent(MAPDialog mapDialog, Long invokeId, MAPErrorMessage mapErrorMessage) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderErrorComponent(MAPDialog mapDialog, Long invokeId, MAPProviderError providerError) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onRejectComponent(MAPDialog mapDialog, Long invokeId, Problem problem) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onInvokeTimeout(MAPDialog mapDialog, Long invoke) {
		// TODO Auto-generated method stub
		
	}

}]]>
	</programlisting>
	</section>
</chapter>