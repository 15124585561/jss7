<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter
	id="setup">
	<title>Installation and Running</title>
	<section
		id="installing_and_using">
		<title>Installing</title>
		<para>Mobicents SS7 stack at its core requires only Java 1.5(Java SE) if you are using only <literal>M3UALinkset</literal>. 
		However if you plan to use <literal>DahdiLinkset</literal> or <literal>DialogicLinkset</literal>, respective SS7 cards 
		needs to be installed on the server along with native libraries.</para>
		
		<para>A simple way to get started is to download and install binary. This will provide you with all the dependencies you need to get going. 
		You can obtain binary release from &THIS.RELEASE_BINARY_URL;
		</para>

		<section
			id="dependencies">
			<title>Binary</title>
			<para>The &THIS.PLATFORM; &THIS.APPLICATION; binary is broken down into a few modules.</para>
			<para>The following is a description of the important services and libraries that make up &THIS.PLATFORM; &THIS.APPLICATION;</para>
			<itemizedlist>
				<listitem>
					<para><literal>asn</literal> : Abstract Syntax Notation One (ASN.1) library is used by various &THIS.PLATFORM; &THIS.APPLICATION;
					protocols to encode/decode the structured data exchanged between Signaling Point over networks. To know more about asn library refer to 
					document included with asn. Applications using any of the &THIS.PLATFORM; &THIS.APPLICATION; User Protocols may never need to call asn API directly,
					however it must be in classpath as &THIS.PLATFORM; &THIS.APPLICATION; User Protocols refers this library.</para>
				</listitem>
				<!-- 
				<listitem>
					<para><literal>stream</literal> : All I/O operation within &THIS.PLATFORM; &THIS.APPLICATION; is asynchronous. 
					Stream API enables the user to abstract I/O operation. To know more about stream library refer to 
					document included with stream. 
					</para>
				</listitem>
				 -->
				<listitem>
					<para><literal>ss7</literal> : ss7 contains the service that is deployed in JBoss AS and libraries that end applications refers to.
					It also includes &THIS.PLATFORM; Signaling Gateway.
					The sub-modules included in ss7 are 
					</para>
					<itemizedlist>
						<listitem>
							<para><literal>docs</literal> : User guide for &THIS.PLATFORM; &THIS.APPLICATION; </para>
						</listitem>
						<listitem>
							<para><literal>mobicents-sgw</literal> : Standalone Signaling Gateway as explained in section 
							<xref linkend="mobicents_signaling_gateway" /> </para>
							<para>mobicents-sgw binary has following layout:</para>
							<mediaobject id="binary_sgw">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/sgw-binary.png" format="PNG" />
								</imageobject>
							</mediaobject>
														
						</listitem>							
						<listitem>
							<para><literal>mobicents-ss7-service</literal> : SS7 service is the core engine as explained in section 
							<xref linkend="design_overview_ss7_service" /> </para>
							
							<para>mobicents-ss7-service binary has following layout:</para>
							<mediaobject id="binary_ss7-service">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/binary-ss7-service.png" format="PNG" />
								</imageobject>
							</mediaobject>							
						</listitem>			
						<listitem>
							<para><literal>native</literal> : native libraries component to interact with SS7 Card installed on server, runtime component. 
							As of now native libraries are compiled only for linux OS. However if you plan to use <literal>M3UALinkset</literal> there is 
							no dependency on OS as everything is 100% java.</para>
						</listitem>	
						<listitem>
							<para><literal>protocols</literal> : The &THIS.PLATFORM; &THIS.APPLICATION; User Protocols libraries. Your application would directly 
							call the API's exposed by these libraries. Depending on application you may be either interested in <literal>TCAP</literal>, 
							<literal>MAP</literal> or both or <literal>ISUP</literal> libraries</para>
						</listitem>	
						<listitem>
							<para><literal>shell</literal> : the Command Line Interface (CLI) module to manage the &THIS.PLATFORM; &THIS.APPLICATION;.
							Refer <xref linkend="shell"/> to understand how to use shell</para>
						</listitem>	
					</itemizedlist>
				</listitem>				
				<!-- <listitem> <para>&THIS.PLATFORM; <literal>M3UA</literal> library </para> </listitem> -->
			</itemizedlist>
			<para>Binary release has following layout:</para>
			<mediaobject id="binary_layout">
				<imageobject>
					<imagedata width="300px" align="center" fileref="images/binnar-structure.png" format="PNG" />
			</imageobject>
			<caption>
				<para>&THIS.PLATFORM; &THIS.APPLICATION; binary layout.
				</para>
			</caption>
		</mediaobject>			
		</section>
	</section>

		<section
			id="installing_binary">
			<title>Installing &THIS.PLATFORM; SS7 Service Binary</title>
			<para>The upper layers of Mobicents SS7 viz., TCAP, MAP depends on &THIS.PLATFORM; SS7 Service and &THIS.PLATFORM; SS7 Service
			must be installed before upper layers can be used. The &THIS.PLATFORM; SS7 Service binary requires that you have 
			JBoss Application Server installed and JBOSS_HOME system property set. To know further details on setting JBOSS_HOME look 
			<xref linkend="jboss_home_setup" /> </para>
			
			<para>Once JBOSS_HOME is properly set, use ant to deploy the mobicents-ss7-service, shell scripts and shell library.</para>
			<important>
						<para>
							Ant 1.6 (or higher) is used to install the binary. Instructions for using Ant, including install, can be found at <ulink url="http://ant.apache.org/" /></para>
			</important>
			<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant deploy
			</programlisting>
			<para>To undeploy these services</para>
			<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant undeploy
			</programlisting>		
			
			<para>
				While above steps will deploy the necessary ss7 service and shell components, the <literal>java.library.path</literal>
				should be set to point the directory containing native component or should be copied to JBoss native library path manually. 
				This step is only required if you are using the SS7 board on server.  
			</para>	
		</section>



		<section
			id="running_binary">
			<title>Running &THIS.PLATFORM; SS7 Service</title>
			<para>
				Starting or stopping &THIS.PLATFORM; SS7 Service is no different than starting or stopping JBoss Application Server
			</para>
			<section
				id="starting_binary">
				<title>Starting</title>
				<para>
					Once installed, you can run server by executing the run.sh (Unix) or run.bat (Microsoft Windows)
					startup scripts in the <filename>&lt;install_directory&gt;/bin</filename> directory (on Unix or Windows). 
					If the service started properly you should see following lines in the Unix terminal or Command Prompt depending on your environment:
				</para>
				<screen><![CDATA[
23:22:26,079 INFO  [LinksetManager] SS7 configuration file path /home/abhayani/workarea/mobicents/jboss-5.1.0.GA/server/default/data/linksetmanager.xml
23:22:26,141 INFO  [LinksetManager] Started LinksetManager
23:22:26,199 INFO  [SS7Service] Starting SCCP stack...
23:22:26,229 INFO  [SccpStackImpl] Starting ...
23:22:26,230 INFO  [RouterImpl] SCCP Router configuration file: /home/abhayani/workarea/mobicents/jboss-5.1.0.GA/server/default/deploy/mobicents-ss7-service/sccp-routing.txt
23:22:26,261 INFO  [SS7Service] SCCP stack Started. SccpProvider bound to java:/mobicents/ss7/sccp
23:22:26,261 INFO  [ShellExecutor] Starting SS7 management shell environment
23:22:26,270 INFO  [ShellExecutor] ShellExecutor listening at /127.0.0.1:3435
23:22:26,270 INFO  [SS7Service] [[[[[[[[[ Mobicents SS7 service started ]]]]]]]]]
]]>
				</screen>	
				
				<para>If you have started &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; for the first time, there are no <literal>Linkset</literal> defined. 
				You need to use Shell Client to connect to &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; as defined in 
				<xref linkend="shell" /> and create <literal>Linkset</literal> 
				as per your need and SS7 card installed</para>
				
				<para>Once the <literal>Linkset</literal> are defined, the state and configuration of <literal>Linkset</literal> and <literal>Link</literal> 
				is persisted by <literal>LinksetManager</literal> which stands server re-start.</para> 
							
			</section>		
			<section
				id="stopping_binary">
				<title>Stopping</title>
					<para>You can shut down the server(s) you can run server(s) by executing the <command>shutdown.sh -s</command> (Unix) or 
					<command>shutdown.bat -s</command> (Microsoft Windows) scripts in the <filename>&lt;install_directory&gt;/bin</filename> 
					directory (on Unix or Windows). Note that if you properly stop the server, you will see the following three lines as the 
					last output in the Unix terminal or Command Prompt:</para>
                        <screen><![CDATA[[Server] Shutdown complete
Shutdown complete
Halting VM]]></screen>

			</section>	
		</section>	

	
	<section id="configuring">
		<title>
			Configuring &THIS.PLATFORM; SS7 Service
		</title>
		<para>Configuration is done through an XML descriptor named <filename>jboss-beans.xml</filename> and is 
		located at <filename>$JBOSS_HOME/server/profile_name/deploy/mobicents-ss7-service/META-INF</filename>, where 
		<application>profile_name</application> is the server profile name.</para>
		
		<section id="configuring_Rem_SGW">
			<title>Configuring Remote Signaling Gateway</title>
			<para> 
				Remote Signaling Gateway is only needed if the underlying SS7 service will leverage <literal>M3UALinkset</literal>.
				<literal>RemSgpImpl</literal> acts as remote Signaling Gateway Process that contains the list of Application Server (AS) (and list 
				of Application Server Process (ASP) within each AS) connecting to external Signaling Gateway (SG).  <literal>M3UAShellExecutor</literal>
				accepts the <literal>M3UA</literal> commands and executes necessary operations. <literal>RemSignalingGateway</literal> manages 
				the remote SGP.
			</para>
			
					<programlisting language="XML" role="XML"><![CDATA[
    <!-- ================================================ -->
    <!-- Remote Signalling Gateway Service                -->
    <!-- ================================================ -->
    <!--
          | Beans RemSgpImpl, M3UAShellExecutor and RemSignalingGateway defined bellow are only 
          | needed if M3UALinkset will be used to connect to external Signaling Gateway. Delete/Comment 
          | out these beans if hardware is installed in same machine where 
          | mobicents-ss7-service is running.
    -->
	<bean name="RemSgpImpl"
		class="org.mobicents.protocols.ss7.m3ua.impl.as.RemSgpImpl">
	</bean>

	<bean name="M3UAShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UAShellExecutor">
		<property name="sgp">
			<inject bean="RemSgpImpl" />
		</property>
	</bean>

	<!-- Define Remote Signalling Gateway-->
	<bean name="RemSignalingGateway"
		class="org.mobicents.ss7.RemSignalingGateway">
		<property name="remSgpImpl">
			<inject bean="RemSgpImpl" />
		</property>
	</bean>]]>
                        </programlisting>					

		</section>
					
		<section id="configuring_LinksetFactory">
			<title>Configuring LinksetFactory</title>
			<para> Concrete implementation of <literal>LinksetFactory</literal> is responsible to create 
			new instances of corresponding <literal>Linkset</literal> when instructed by <literal>LinksetManager</literal>. 
			&THIS.PLATFORM; &THIS.APPLICATION; defined three linkset factories : </para>
			
			<itemizedlist>
				<listitem>
					<para><literal>DahdiLinksetFactory</literal> </para>
					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="DahdiLinksetFactory"
		class="org.mobicents.ss7.hardware.dahdi.oam.DahdiLinksetFactory">
	</bean>]]>
                        </programlisting>					
				</listitem>
				<listitem>
					<para><literal>DialogicLinksetFactory</literal></para>
					 <programlisting language="XML" role="XML"><![CDATA[
	<bean name="DialogicLinksetFactory"
		class="org.mobicents.ss7.hardware.dialogic.oam.DialogicLinksetFactory">
	</bean>]]>
                        </programlisting>
				</listitem>
				<listitem>
					<para><literal>M3UALinksetFactory</literal></para>
					 					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="M3UALinksetFactory"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UALinksetFactory">
		<property name="remSgp">
			<inject bean="RemSgpImpl" />
		</property>
	</bean>]]>
                        </programlisting>
				</listitem>
			</itemizedlist>					
			<para>Its highly unlikely that you would require all three factories on same server. If you have <literal>dahdi</literal> based 
			SS7 card installed, keep <literal>DahdiLinksetFactory</literal> and remove other two. If you have <literal>dialogic</literal> based 
			SS7 card installed, keep <literal>DialogicLinksetFactory</literal> and remove other two. If you don't have any hardware installed and depend on 
			M3UA, keep <literal>M3UALinksetFactory</literal> and remove other two. Nevertheless you can still use above factories in any combinations. 
			</para>
			<para> <literal>LinksetFactoryFactory</literal> is just a call-back class listening for new factories deployed 
			and maintains Map of available factory name vs factory. You should never touch this bean.</para>
		</section>	
		<section id="configuring_LinksetManager">
			<title>Configuring LinksetManager</title>
			<para> 
				<literal>LinksetManager</literal> is responsible for managing <literal>Linkset</literal> and <literal>Link</literal>.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Linkset manager Service                                              -->
    <!-- ================================================ -->
	<bean name="LinksetManager"
		class="org.mobicents.ss7.linkset.oam.LinksetManager">

		<property name="linksetFactoryFactory">
			<inject bean="LinksetFactoryFactory" />
		</property>
		<property name="persistDir">${jboss.server.data.dir}</property>
	</bean>
	
	<bean name="LinksetExecutor"
		class="org.mobicents.ss7.linkset.oam.LinksetExecutor">
		<property name="linksetManager">
			<inject bean="LinksetManager" />
		</property>
	</bean>]]></programlisting>		
			<para>LinksetManager when started looks for file  <filename>linksetmanager.xml</filename> containing serialized information of 
			underlying linksets and links. The directory path is configurable by changing value of <literal>persistDir</literal> property.</para>
			<warning><para><filename>linksetmanager.xml</filename> should never be edited by hand. Always use Shell Client to connect to 
			&THIS.PLATFORM; &THIS.APPLICATION; and execute commands.</para></warning>	
			<para><literal>LinksetExecutor</literal> accepts the <literal>M3UA</literal> commands and executes necessary operations.</para>
		</section>	
		
		<section id="configuring_ShellExecutor">
			<title>Configuring ShellExecutor</title>
			<para> 
				<literal>ShellExecutor</literal> is responsible for listening to incoming command. Received commands are executed on local resources to 
				perform actions like creation and management of <literal>SCCP</literal> routing rule, creation and management of <literal>Linkset</literal>, 
				management of <literal>M3UA</literal> stack.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Shell Service                                                        -->
    <!-- ================================================ -->
	<!-- Define Shell Executor -->
	<bean name="ShellExecutor"
		class="org.mobicents.ss7.ShellExecutor">
		<property name="address">${jboss.bind.address}</property>
		<property name="port">3435</property>
		<property name="linksetExecutor">
			<inject bean="LinksetExecutor" />
		</property>
		<!-- M3UAShellExecutor required only if M3UALinkset will be created. -->
		<property name="m3UAShellExecutor">
			<inject bean="M3UAShellExecutor" />
		</property>
		<property name="ruleExecutor">
			<inject bean="RuleExecutor" />
		</property>
	</bean>]]></programlisting>		
			<para>By default ShellExecutor listens at <literal>jboss.bind.address</literal> and port <literal>3435</literal>. 
			You may set the <literal>address</literal> property to any valid IP address that your host is assigned. 
			The shell commands are exchanged over TCP/IP.</para>
			<note><para>To understand JBoss bind options look at 
			<ulink url="http://docs.jboss.org/jbossas/docs/Installation_And_Getting_Started_Guide/5/html_single/index.html">Installation_And_Getting_Started_Guide</ulink> </para> </note>
				
		</section>	
		
		<section id="configuring_SS7Service">
			<title>Configuring SS7Service</title>
			<para> 
				<literal>SS7Service</literal> acts as core engine binding all the components together. 
				To get holistic view of SS7 Service look at <xref linkend="design_overview_ss7_service" /> 
			</para>
			<programlisting language="XML" role="XML"><![CDATA[        <!-- ================================================ -->
    <!-- Mobicents SS7 Service                                                -->
    <!-- ================================================ -->
	<bean name="SS7Service" class="org.mobicents.ss7.SS7Service">
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="org.mobicents.ss7:service=SS7Service",exposedInterface=org.mobicents.ss7.SS7ServiceMBean.class,registerDirectly=true)</annotation>
		<property name="jndiName">java:/mobicents/ss7/sccp</property>		
		<property name="routerImpl"><inject bean="RouterImpl" /></property>
		<property name="linksetManager"><inject bean="LinksetManager" /></property>
		<property name="shellExecutor"><inject bean="ShellExecutor" /></property>
		<!-- remSignalingGateway required only if M3UALinkset will be used to connect to remote Signalling Gateway -->
		<property name="remSignalingGateway"><inject bean="RemSignalingGateway" /></property>		
	</bean>]]></programlisting>		
			<para> SS7 service creates new instance of SCCP stack and binds it to JNDI address <literal>java:/mobicents/ss7/sccp</literal>. 
			The JNDI name can be configured to any valid JNDI name specific to your application.</para>
		</section>			
	</section>
		
		
<!-- Configuring Signaling Gateway -->		
		<section
			id="installing_sgw_binary">
			<title>Installing &THIS.PLATFORM; Signaling Gateway Binary</title>
			<para>
				&THIS.PLATFORM; Signaling Gateway Binary doesn't require any additional steps. You may copy <literal>mobicents-sgw</literal>
				to any folder of your choice.
			</para>	
		</section>		
		
		
		<section
			id="running_sgw_binary">
			<title>Running &THIS.PLATFORM; Signaling Gateway</title>
			<para>
				In the Linux terminal or Windows command prompt, the
				&THIS.PLATFORM; Signaling Gateway has started successfully if the
				last line of output is similar to the following
			</para>
			<programlisting><![CDATA[15:51:18,247 INFO  [MainDeployer] [[[[[[[[[ Mobicents Signaling Gateway: release.version=]]>&THIS.VERSION; <![CDATA[Started ]]]]]]]]]]]></programlisting>
			
			<section id="starting_sgw_binary">
			<title>Starting &THIS.PLATFORM; Signaling Gateway</title>			
				<procedure>
					<title>
						Running the &THIS.PLATFORM; Signaling Gateway on Linux
					</title>
					<step>
						<para>
							Change the working directory to installation
							directory (the one in which the zip file's
							contents was extracted to)
						</para>
						<screen>downloads]$ cd &quot;mobicents-ss7-&lt;version&gt;/ss7/mobicents-sgw&quot;</screen>
					</step>
					<step>
						<para>
							(Optional) Ensure that the
							<filename>bin/run.sh</filename>
							start script is executable.
						</para>
						<screen>mobicents-sgw$ chmod +x bin/run.sh</screen>
					</step>
					<step>
						<para>
							Execute the
							<filename>run.sh</filename>
							Bourne shell script.
						</para>
						<screen>mobicents-sgw$ ./bin/run.sh</screen>
					</step>
				</procedure>
	
				<procedure>
					<title>
						Running the &THIS.PLATFORM; Signaling Gateway on <productname>Windows</productname>
					</title>
					<step>
						<para>
							Using Windows Explorer, navigate to the <filename>bin</filename> subfolder in the installation directory.
						</para>
					</step>
					<step>
						<para>
							The preferred way to start the &THIS.PLATFORM; Signaling Gateway is from the Command Prompt. The command
							line interface displays details of the startup
							process, including any problems encountered
							during the startup process.
						</para>
						<para>
							Open the Command Prompt via the <guilabel>Start</guilabel> menu and navigate to the correct folder:
						</para>
						<screen>C:\Users\&lt;user&gt;\My	Downloads&gt;cd &quot;mobicents-ss7-&lt;version&gt;\ss7\mobicents-sgw&quot;</screen>
					</step>
					<step>
						<para>
							Start the Gateway by executing one of the following files:
							<itemizedlist>
								<listitem>
									<para>
										<filename>run.bat</filename>
										batch file:
									</para>
									<screen>C:\Users\&lt;user&gt;\My Downloads\mms-standalone&lt;version&gt;&gt;bin\run.bat</screen>
								</listitem>
							</itemizedlist>
						</para>
					</step>
				</procedure>	
			</section>		
			<section id="sgw-Running-alter">
				<title>Start the Gateway With Alternate Configuration</title>
				<para>
					Using <literal>run.sh</literal> without any arguments binds the gateway at <literal>127.0.0.1</literal>. 
					To bind gateway to different ip, pass the ip address as value to <literal>-b</literal> command line option. 
					For example to bind the server to <literal>115.252.103.220</literal>
				</para>
				<screen>mobicents-sgw$ ./bin/run.sh -b 115.252.103.220</screen>
			</section>	
			<section id="sgw-Stopping">
				<title>Stopping</title>
				<para>
					The only option to stop the gateway is by pressing <literal>Ctrl c</literal>  and bringing down the JVM or kill the process.
				</para>
			</section>					
		</section>			
		
	<section id="configuring_sgw">
		<title>
			Configuring &THIS.PLATFORM; Signaling Gateway
		</title>
		<para>Configuration is done through an XML descriptor named <filename>sgw-beans.xml</filename> and is 
		located at <filename>mobicents-sgw/deploy</filename>, </para>
		
		<section id="configuring_SGWP">
			<title>Configuring Signaling Gateway Process</title>
			<para> 
				Signaling Gateway Process that contains the list of Remote Application Server (Rem AS) (and list 
				of Remote Application Server Process (Rem ASP) within each rem AS) connecting to external Application Server (AS).  
				<literal>M3UAShellExecutor</literal> accepts the <literal>M3UA</literal> commands and executes necessary operations.
			</para>
			
					<programlisting language="XML" role="XML"><![CDATA[
    <!-- ================================================ -->
    <!-- Signalling Gateway Process Service               -->
    <!-- ================================================ -->
	<bean name="SgpImpl"
		class="org.mobicents.protocols.ss7.m3ua.impl.sg.SgpImpl">
		<constructor>
			<parameter>${sgw.bind.address}</parameter>
			<parameter>3434</parameter>
		</constructor>
	</bean>

	<bean name="M3UAShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UAShellExecutor">
		<property name="sgp">
			<inject bean="SgpImpl" />
		</property>
	</bean>]]>
                        </programlisting>	
			<para>
				<literal>SgpImpl</literal> listens at ip <literal>${sgw.bind.address}</literal> and port <literal>3434</literal> for incoming
				request from ASP. 
			</para>

		</section>
					
		<section id="sgw_configuring_LinksetFactory">
			<title>Configuring LinksetFactory</title>
			<para> Concrete implementation of <literal>LinksetFactory</literal> is responsible to create 
			new instances of corresponding <literal>Linkset</literal> when instructed by <literal>LinksetManager</literal>. 
			&THIS.PLATFORM; Signaling Gateway defines two linkset factories : </para>
			
			<itemizedlist>
				<listitem>
					<para><literal>DahdiLinksetFactory</literal> </para>
					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="DahdiLinksetFactory"
		class="org.mobicents.ss7.hardware.dahdi.oam.DahdiLinksetFactory">
	</bean>]]>
                        </programlisting>					
				</listitem>
				<listitem>
					<para><literal>DialogicLinksetFactory</literal></para>
					 <programlisting language="XML" role="XML"><![CDATA[
	<bean name="DialogicLinksetFactory"
		class="org.mobicents.ss7.hardware.dialogic.oam.DialogicLinksetFactory">
	</bean>]]>
                        </programlisting>
				</listitem>
			</itemizedlist>					
			<para>Its highly unlikely that you would require both the factories on same gateway. If you have <literal>dahdi</literal> based 
			SS7 card installed, keep <literal>DahdiLinksetFactory</literal> and remove other. If you have <literal>dialogic</literal> based 
			SS7 card installed, keep <literal>DialogicLinksetFactory</literal> and remove other. 
			</para>
			<para> <literal>LinksetFactoryFactory</literal> is just a call-back class listening for new factories deployed 
			and maintains Map of available factory name vs factory. You should never touch this bean.</para>
		</section>	
		<section id="sgw_configuring_LinksetManager">
			<title>Configuring LinksetManager</title>
			<para> 
				<literal>LinksetManager</literal> is responsible for managing <literal>Linkset</literal> and <literal>Link</literal>.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Linkset manager Service                                              -->
    <!-- ================================================ -->
	<bean name="LinksetManager"
		class="org.mobicents.ss7.linkset.oam.LinksetManager">

		<property name="linksetFactoryFactory">
			<inject bean="LinksetFactoryFactory" />
		</property>
		<property name="persistDir">${linkset.persist.dir}</property>
	</bean>
	
	<bean name="LinksetExecutor"
		class="org.mobicents.ss7.linkset.oam.LinksetExecutor">
		<property name="linksetManager">
			<inject bean="LinksetManager" />
		</property>
	</bean>]]></programlisting>		
			<para>LinksetManager when started looks for file  <filename>linksetmanager.xml</filename> containing serialized information of 
			underlying linksets and links. The directory path is configurable by changing value of <literal>persistDir</literal> property.</para>
			<warning><para><filename>linksetmanager.xml</filename> should never be edited by hand. Always use Shell Client to connect to 
			&THIS.PLATFORM; Signaling Gateway and execute commands.</para></warning>	
			<para><literal>LinksetExecutor</literal> accepts the <literal>M3UA</literal> commands and executes necessary operations.</para>
		</section>	
		
		<section id="sgw_configuring_ShellExecutor">
			<title>Configuring ShellExecutor</title>
			<para> 
				<literal>ShellExecutor</literal> is responsible for listening to incoming command. Received commands are executed on local resources to 
				perform actions like creation and management of <literal>Linkset</literal>, 
				management of <literal>M3UA</literal> stack.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Shell Service                                                        -->
    <!-- ================================================ -->
	<bean name="ShellExecutor"
		class="org.mobicents.ss7.sgw.ShellExecutor">
		<property name="address">${sgw.bind.address}</property>
		<property name="port">3436</property>
		<property name="linksetExecutor">
			<inject bean="LinksetExecutor" />
		</property>
		<property name="m3UAShellExecutor">
			<inject bean="M3UAShellExecutor" />
		</property>
	</bean>]]></programlisting>		
			<para>By default ShellExecutor listens at <literal>sgw.bind.address</literal> and port <literal>3436</literal>. 
			You may set the <literal>address</literal> property to any valid IP address that your host is assigned. 
			The shell commands are exchanged over TCP/IP.</para>
		</section>	
		
		<section id="sgw_configuring_SGW">
			<title>Configuring SignalingGateway</title>
			<para> 
				<literal>SignalingGateway</literal> acts as core engine binding all the components together. 
			</para>
			<programlisting language="XML" role="XML"><![CDATA[        <!-- ================================================ -->
    <!-- Mobicents Signaling Gateway                                      -->
    <!-- ================================================ -->
	<bean name="SignalingGateway"
		class="org.mobicents.ss7.sgw.SignalingGateway">

		<property name="shellExecutor">
			<inject bean="ShellExecutor" />
		</property>

		<property name="nodalInterworkingFunction">
			<inject bean="NodalInterworkingFunction" />
		</property>

	</bean>]]></programlisting>		
			<para>The <literal>NodalInterworkingFunction</literal> sits between the SS7 netwrok and IP network and routes messages 
			to/from both the MTP3 and the M3UA layer, based on the SS7 DPC or DPC/SI address information</para>
		</section>			
	</section>		
		
	<section
		id="source_code">
		<title>
			Setup from source
		</title>
		<para>&THIS.PLATFORM; &THIS.APPLICATION; is an open source project, instructions for building from source are part of the manual! 
		Building from source means you can stay on top with the latest features. Whilst aspects of &THIS.PLATFORM; &THIS.APPLICATION; are quite 
		complicated, you may find ways to become contributors.</para>
		
		<para>&THIS.PLATFORM; &THIS.APPLICATION; works with JDK1.5 and above. you will need also need to have the following tools installed. 
		Minimum requirement version numbers provided.</para>
		
		<itemizedlist>
			<listitem>
				<para><literal>Subversion Client 1.4</literal> : Instructions for using SVN, including install, can be found at <ulink
								url="http://subversion.tigris.org" /></para>
			</listitem>
			<listitem>
				<para><literal>Maven 2.0.9</literal> : Instructions for using Maven, including install, can be found at <ulink
								url="http://maven.apache.org/" /></para>
			</listitem>	
			<listitem>
				<para><literal>Ant 1.7.0</literal> : Instructions for using Ant, including install, can be found at <ulink
								url="http://ant.apache.org" /></para>
			</listitem>	
		</itemizedlist>

		<section
			id="source_building">
			<title>Release Source Code Building</title>
			<procedure>
				<step>
					<title>Downloading the source code</title>
					
					<para>Use SVN to checkout a specific release source, the base URL is &THIS.RELEASE_SOURCE_CODE_URL;,
						then add the specific release version, lets consider &THIS.VERSION;.
					</para>
					<programlisting>[usr]$ svn co &THIS.RELEASE_SOURCE_CODE_URL;/&THIS.APPLICATION.DIRNAME;-&THIS.VERSION;</programlisting>
				
				</step>
				<step>
					<title>Building the source code</title>
					<para>Now that we have the source the next step is to build and install the source. 
					&THIS.PLATFORM; &THIS.APPLICATION; uses Maven 2 to build the system. There are two profiles 
					available "dahdilinux" and "dialogiclinux" appart from default profile that doesn't try to compile the native modules.</para>
					<note>
						<para>
							Native modules are supported only for linux OS for now.
						</para>
					</note>					
					<para>Use "dahdilinux" profile if linux server on which this code is built already has dahdi module installed. 
					Make sure you pass "include.zap" system property pointing to correct directory where dahdi is installed</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install -Pdahdilinux -Dinclude.zap=/usr/include/dahdi
				    </programlisting>
				    
					<para>Use "dialogiclinux" profile if linux server on which this code is built already has dialogic module installed. 
					Make sure you pass "include.dialogic" system property pointing to correct directory where dialogic libraries are installed</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install -Pdialogclinux -Dinclude.dialogic=/usr/include/dialogic
				    </programlisting>	
				    
				   	<para>To build &THIS.PLATFORM; &THIS.APPLICATION; without building any native libraries use</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install 
				    </programlisting>
					<note>
						<para>
							If you are using &THIS.PLATFORM; &THIS.APPLICATION; without any native dependencies, &THIS.PLATFORM; &THIS.APPLICATION; can run on any OS.
						</para>
					</note>
									    
							    
					<para>Use Ant to build the binary .</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/release
[usr]$ ant
				    </programlisting>

				</step>
			</procedure>
		</section>

		<section
			id="trunk_source_building">
			<title>Development Trunk Source Building</title>
			<para>
				Similar process as for
				<xref
					linkend="source_building" />,
				the only change is the SVN source code URL, which is &THIS.TRUNK_SOURCE_CODE_URL;.
			</para>
		</section>

	</section>
</chapter>

