<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter
	id="setup">
	<title>Installation and Running</title>
	<section
		id="installing_and_using">
		<title>Installing</title>
		<para>&THIS.PLATFORM; SS7 stack at its core requires only Java if you are using only <literal>M3UA</literal>. 
		However if you plan to use SS7 hardware, respective SS7 cards 
		needs to be installed on the server along with native libraries.</para>
		
		<para>A simple way to get started is to download and install binary. This will provide you with all the dependencies you need to get going. 
		You can obtain binary release from &THIS.RELEASE_BINARY_URL;
		</para>

		<section id="binary">
			<title>Binary</title>
			<para>The &THIS.PLATFORM; &THIS.APPLICATION; binary is broken down into a few modules.</para>
			
			<para>Binary release has following layout:</para>
			<mediaobject id="binary_layout">
				<imageobject>
					<imagedata width="300px" align="center" fileref="images/binnar-structure.png" format="PNG" />
				</imageobject>
				<caption>
					<para>&THIS.PLATFORM; &THIS.APPLICATION; binary layout.
					</para>
				</caption>
			</mediaobject>					
			<note>
				<title>Note</title>
				<para>
					X.Y.Z in above layout is the respective release version of binary.
				</para>
			</note>
			
			<para>The following is a description of the important services and libraries that make up &THIS.PLATFORM; &THIS.APPLICATION; binary</para>
			<itemizedlist>
				<listitem>
					<para><literal>asn</literal> : Abstract Syntax Notation One (ASN.1) library is used by various &THIS.PLATFORM; &THIS.APPLICATION;
					protocols to encode/decode the structured data exchanged between Signaling Point over networks. To know more about asn library refer to 
					document included with asn. Applications using any of the &THIS.PLATFORM; &THIS.APPLICATION; User Protocols may never need to call asn API directly,
					however it must be in classpath as &THIS.PLATFORM; &THIS.APPLICATION; User Protocols refers this library.</para>
					<para>
						To understand more about asn, refer to documentation included in <filename>asn/docs</filename>
					</para>
				</listitem>
				<listitem>
					<para><literal>sctp</literal> : Stream Control Transmission Protocol (SCTP) Library is providing the convenient API's over Java SCTP. 
					This library will be used only if M3UA layer is used. 
					</para>
					<para>
						To understand more about sctp, refer to documentation included in <filename>sctp/docs</filename>
					</para>
				</listitem>
				<listitem>
					<para><literal>ss7</literal> : ss7 contains the core protocol libraries to be used by end application as well as 
					service that is deployed in JBoss AS.
					The sub-modules included in ss7 are 
					</para>
					<itemizedlist>
						<listitem>
							<para><literal>docs</literal> : User guide for &THIS.PLATFORM; &THIS.APPLICATION; </para>
						</listitem>
											
						<listitem>
							<para><literal>mobicents-ss7-service</literal> : SS7 service is the core engine as explained in section 
							<xref linkend="mobicents_ss7_service" /> </para>
							
							<para>mobicents-ss7-service binary has following layout:</para>
							<mediaobject id="binary_ss7-service">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/binary-ss7-service.png" format="PNG" />
								</imageobject>
							</mediaobject>							
						</listitem>			
						<listitem>
							<para><literal>native</literal> : native libraries component to interact with SS7 Card installed on server, runtime component. 
							As of now native libraries are compiled only for linux OS. However if you plan to use <literal>M3UA</literal> there is 
							no dependency on OS as everything is 100% java.</para>
						</listitem>	
						<listitem>
							<para><literal>protocols</literal> : The &THIS.PLATFORM; &THIS.APPLICATION; User Protocols libraries. Your application would directly 
							call the API's exposed by these libraries. Depending on application you may be either interested in <literal>TCAP</literal>, 
							<literal>MAP</literal> or both or <literal>ISUP</literal> libraries</para>
							<mediaobject id="binary_ss7-protocols">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/binary-ss7-protocols.png" format="PNG" />
								</imageobject>
							</mediaobject>							
						</listitem>	
						<listitem>
							<para><literal>shell</literal> : the Command Line Interface (CLI) module to manage the <literal>mobicents-ss7-service</literal>.
							Refer <xref linkend="shell"/> to understand how to use shell</para>
						</listitem>	
					</itemizedlist>
				</listitem>				
			</itemizedlist>
		</section>
	</section>
	<section id="mobicents_ss7_service">
		<title>&THIS.PLATFORM; SS7 Service</title>
		<para>
			As the name indicates &THIS.PLATFORM; SS7 Service is a deployable service that can be deployed in any container that supports
			<literal>JMX</literal> and exposes <literal>JNDI</literal>
		</para>
		<para>
			&THIS.PLATFORM; SS7 Service exposes convenient way of configuring SS7 stack via CLI commands. Service wraps SS7 level 4 i.e., SCCP
			and lower layers and exposes it via JNDI such that layer above can do the look-up and use it in any application. The advantage of doing
			so is SCCP and lower layers remains same while above layers can register it-self based on Sub System Number (SSN). 
		</para>
	</section>
	
	<section
		id="installing_binary">
		<title>Installing &THIS.PLATFORM; SS7 Service Binary</title>
		<para>The upper layers of Mobicents SS7 viz., TCAP, MAP depends on &THIS.PLATFORM; SS7 Service and &THIS.PLATFORM; SS7 Service
		must be installed before upper layers can be used. The &THIS.PLATFORM; SS7 Service binary requires that you have 
		JBoss Application Server installed and JBOSS_HOME system property set. To know further details on setting JBOSS_HOME look 
		<xref linkend="jboss_home_setup" /> </para>
		
		<para>Once JBOSS_HOME is properly set, use ant to deploy the mobicents-ss7-service, shell scripts and shell library.</para>
		<important>
					<para>
						Ant 1.6 (or higher) is used to install the binary. Instructions for using Ant, including install, can be found at <ulink url="http://ant.apache.org/" /></para>
		</important>
		<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant deploy
		</programlisting>
		<para>To undeploy these services</para>
		<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant undeploy
		</programlisting>		
		
		<para>
			While above steps will deploy the necessary ss7 service and shell components, the <literal>java.library.path</literal>
			should be set to point the directory containing native component or should be copied to JBoss native library path manually. 
			This step is only required if you are using the SS7 board on server.  
		</para>	
	</section>



		<section
			id="running_binary">
			<title>Running &THIS.PLATFORM; SS7 Service</title>
			<para>
				Starting or stopping &THIS.PLATFORM; SS7 Service is no different than starting or stopping JBoss Application Server
			</para>
			<section
				id="starting_binary">
				<title>Starting</title>
				<para>
					Once installed, you can run server by executing the run.sh (Unix) or run.bat (Microsoft Windows)
					startup scripts in the <filename>&lt;install_directory&gt;/bin</filename> directory (on Unix or Windows). 
					If the service started properly you should see following lines in the Unix terminal or Command Prompt depending on your environment:
				</para>
				<screen><![CDATA[
23:22:26,079 INFO  [LinksetManager] SS7 configuration file path /home/abhayani/workarea/mobicents/jboss-5.1.0.GA/server/default/data/linksetmanager.xml
23:22:26,141 INFO  [LinksetManager] Started LinksetManager
23:22:26,199 INFO  [SS7Service] Starting SCCP stack...
23:22:26,229 INFO  [SccpStackImpl] Starting ...
23:22:26,230 INFO  [RouterImpl] SCCP Router configuration file: /home/abhayani/workarea/mobicents/jboss-5.1.0.GA/server/default/deploy/mobicents-ss7-service/sccp-routing.txt
23:22:26,261 INFO  [SS7Service] SCCP stack Started. SccpProvider bound to java:/mobicents/ss7/sccp
23:22:26,261 INFO  [ShellExecutor] Starting SS7 management shell environment
23:22:26,270 INFO  [ShellExecutor] ShellExecutor listening at /127.0.0.1:3435
23:22:26,270 INFO  [SS7Service] [[[[[[[[[ Mobicents SS7 service started ]]]]]]]]]
]]>
				</screen>	
				
				<para>If you have started &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; for the first time, <literal>SS7</literal> is not configured. 
				You need to use Shell Client to connect to &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; as defined in 
				<xref linkend="shell" /> . With <literal>CLI</literal> you can configure how service interacts with SS7 network, that is you configure either installed SS7 card and its native library\
				, or <literal>M3UA</literal> layer.</para>
				
				<para>Once the configured, the state and configuration of <literal>SS7</literal> is persisted which stands server re-start.</para> 
							
			</section>		
			<section
				id="stopping_binary">
				<title>Stopping</title>
					<para>You can shut down the server(s) by executing the <command>shutdown.sh -s</command> (Unix) or 
					<command>shutdown.bat -s</command> (Microsoft Windows) scripts in the <filename>&lt;install_directory&gt;/bin</filename> 
					directory (on Unix or Windows). Note that if you properly stop the server, you will see the following three lines as the 
					last output in the Unix terminal or Command Prompt:</para>
                        <screen><![CDATA[[Server] Shutdown complete
Halting VM]]></screen>

			</section>	
		</section>	

	
	<section id="configuring">
		<title>
			Configuring &THIS.PLATFORM; SS7 Service
		</title>
		<para>Configuration is done through an XML descriptor named <filename>jboss-beans.xml</filename> and is 
		located at <filename>$JBOSS_HOME/server/profile_name/deploy/mobicents-ss7-service/META-INF</filename>, where 
		<application>profile_name</application> is the server profile name.</para>
		
		<para>The &THIS.PLATFORM; SS7 Layer 4 (<literal>SCCP, ISUP</literal>) leverages either of following <literal>MTP</literal> 
		layers to exchange signalling messages with remote signalling points</para>
		
		<itemizedlist>
			<listitem>
				<para><literal>M3UA</literal></para>
			</listitem>
			<!-- 
			<listitem>
				<para><literal>dahdi</literal></para>
			</listitem>		
			 -->	
			<listitem>
				<para><literal>dialogic</literal></para>
			</listitem>			
		</itemizedlist>
		
		<para>The ss7 service will be configured with either of these services.</para>
		
		<section id="configuring_Rem_SGW">
			<title>Configuring M3UA</title>
			<para> 
				<literal>M3UAManagement</literal> is only needed if the underlying SS7 service will leverage <literal>M3UA</literal>.
				<classname>M3UAManagement</classname> configuration is further explained in <xref linkend="mobicents_m3ua_management" /> 
			</para>
			
					<programlisting language="XML" role="XML"><![CDATA[
	<!-- ==================================================================== -->
	<!-- SCTP                                                                 -->
	<!-- SCTP Management is used by M3UA only. Comment out if you are using   -->
    <!-- SS7 hardware                                                         -->
	<!-- ==================================================================== -->
	<bean name="SCTPManagement" class="org.mobicents.protocols.sctp.ManagementImpl">
		<constructor>
			<parameter>SCTPManagement</parameter>
		</constructor>
		<property name="persistDir">${jboss.server.data.dir}</property>
		<property name="singleThread">true</property>
		<property name="connectDelay">30000</property>
	</bean>

	<!-- ==================================================================== -->
	<!-- M3UA                                                                 -->
	<!-- M3UAManagement is managing the m3ua side commands                    -->
	<!-- Comment out if you are using SS7 hardware                            -->
	<!-- ==================================================================== -->
	<bean name="Mtp3UserPart" class="org.mobicents.protocols.ss7.m3ua.impl.M3UAManagement">
		<constructor>
			<parameter>Mtp3UserPart</parameter>
		</constructor>
		<property name="persistDir">${jboss.server.data.dir}</property>
		<property name="transportManagement">
			<inject bean="SCTPManagement" />
		</property>
	</bean>

	<bean name="M3UAShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UAShellExecutor">
		<property name="m3uaManagement">
			<inject bean="Mtp3UserPart" />
		</property>
		<property name="sctpManagement">
			<inject bean="SCTPManagement" />
		</property>
	</bean>]]>
            </programlisting>		
			<para>
				<classname>org.mobicents.protocols.sctp.ManagementImpl</classname> takes <classname>String</classname> as constructor
				argument. The name is prepend to <literal>xml</literal> file created by SCTP stack for persisting state of SCTP resources. 
				The <literal>xml</literal> is stored in path specified by <literal>persistDir</literal> property above.
			</para>
			<para>
				For example in above case, when &THIS.PLATFORM; SS7 Service is started file <filename>SCTPManagement_sctp.xml</filename> 
				will be created at <filename>$JBOSS_HOME/server/profile_name/data</filename> directory
			</para>
			<para>
				<classname>org.mobicents.protocols.ss7.m3ua.impl.M3UAManagement</classname> takes <classname>String</classname> as constructor
				argument. The name is prepend to <literal>xml</literal> file created by M3UA stack for persisting state of M3UA resources. 
				The <literal>xml</literal> is stored in path specified by <literal>persistDir</literal> property above.
			</para>
			<para>
				For example in above case, when &THIS.PLATFORM; SS7 Service is started file <filename>Mtp3UserPart_m3ua.xml</filename> 
				will be created at <filename>$JBOSS_HOME/server/profile_name/data</filename> directory
			</para>
		</section>
		
		<section id="configuring_dialogic">
			<title>Configuring dialogic</title>
			<para><literal>Dialogic</literal> based MTP layer will only be used when you have installed Dialogic cards. 
			
			<literal>DialogicMtp3UserPart</literal> communicates with Dialogic hardware. Its asumed here that MTP3 and MTP2 is leveraged from
			Dialogic stack either on-board or on-host. 
			</para>
			

					<programlisting language="XML" role="XML"><![CDATA[
	<!-- ==================================================================== -->
	<!-- Dialogic Mtp3UserPart -->
	<!-- ==================================================================== -->
		<bean name="Mtp3UserPart" class="org.mobicents.ss7.hardware.dialogic.DialogicMtp3UserPart"> 
			<property name="sourceModuleId">61</property> <property name="destinationModuleId">34</property> 
		</bean>]]>
                        </programlisting>					
			
			<para> <literal>sourceModuleId</literal> is source module id and should match with one configured in 
			system.txt used by dialogic drivers. Here 61 is assigned for Mobicents process. <literal>destinationModuleId</literal> 
			is destination module id. 34 is default Dialogic MTP3 module id.</para>
			</section>
		
		<section id="configuring_SCCP">
			<title>Configuring SCCP</title>
			<para> 
				As name suggests <literal>SccpStack</literal> initiates the SCCP stack routines. 
			</para>
			<programlisting language="XML" role="XML"><![CDATA[	<!-- ==================================================================== -->
	<!-- SCCP Service -->
	<!-- ==================================================================== -->
	<bean name="SccpStack" class="org.mobicents.protocols.ss7.sccp.impl.SccpStackImpl">
		<constructor>
			<parameter>SccpStack</parameter>
		</constructor>
		<property name="localSpc">6535</property>
		<property name="ni">3</property>
		<property name="persistDir">${jboss.server.data.dir}</property>
		<property name="removeSpc">true</property>
		<property name="mtp3UserPart">
			<inject bean="Mtp3UserPart" />
		</property>
	</bean>

	<bean name="SccpExecutor"
		class="org.mobicents.protocols.ss7.sccp.impl.oam.SccpExecutor">
		<property name="sccpStack">
			<inject bean="SccpStack" />
		</property>
	</bean>]]></programlisting>	
			<para>
				<classname>org.mobicents.protocols.ss7.sccp.impl.SccpStackImpl</classname> takes <classname>String</classname> as constructor
				argument. The name is prepend to <literal>xml</literal> file created by SCCP stack for persisting state of SCCP resources. 
				The <literal>xml</literal> is stored in path specified by <literal>persistDir</literal> property above.
			</para>
			<para>
				For example in above case, when &THIS.PLATFORM; SS7 Service is started two file's <filename>SccpStack_sccpresource.xml</filename> 
				and <filename>SccpStack_sccprouter.xml</filename> will be created at <filename>$JBOSS_HOME/server/profile_name/data</filename> directory
			</para>				
			<para>				
				Stack has following properties: 
				<variablelist>
					<varlistentry>
						<term>localSpc</term>
						<listitem>
							<para>property specifies the local signaling point code.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>ni</term>
						<listitem>
							<para>specifies the network indicator that forms the part of service information octet (SIO)</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>persistDir</term>
						<listitem>
							<para>As explained above</para>
						</listitem>
					</varlistentry>					
					<varlistentry>
						<term>removeSpc</term>
						<listitem>
							<para>
								After Global Title Translation, if the SCCP address includes the destination point code (DPC)
								however Address Indicator (AI) indicates route on Global Title and <literal>removeSpc</literal> is
								set to true, DPC will be removed from SCCP Address. The same rule applies for both calling as
								well as called party SCCP Address. 
							</para>
						</listitem>
					</varlistentry>					
					<varlistentry>
						<term>mtp3UserPart</term>
						<listitem>
							<para>specifies SS7 Level 3 to be used as transport medium(  be it SS7 card or M3UA)</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>

			<para> <literal>SccpExecutor</literal> accepts <literal>sccp</literal> commands and executes necessary operations</para>
		</section>			
		<section id="configuring_ShellExecutor">
			<title>Configuring ShellExecutor</title>
			<para> 
				<literal>ShellExecutor</literal> is responsible for listening incoming commands. Received commands are executed on local resources to 
				perform actions like creation and management of <literal>SCCP</literal> routing rule, management of <literal>SCTP</literal> and 
				management of <literal>M3UA</literal> stack.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Shell Service                                                        -->
    <!-- ================================================ -->
	<!-- Define Shell Executor -->
	<bean name="ShellExecutor" class="org.mobicents.ss7.ShellExecutor">
		<property name="address">${jboss.bind.address}</property>
		<property name="port">3435</property>

		<property name="sccpExecutor">
			<inject bean="SccpExecutor" />
		</property>
		<property name="m3UAShellExecutor">
			<inject bean="M3UAShellExecutor" />
		</property>
	</bean>]]></programlisting>		
			<para>By default ShellExecutor listens at <literal>jboss.bind.address</literal> and port <literal>3435</literal>. 
			You may set the <literal>address</literal> property to any valid IP address that your host is assigned. 
			The shell commands are exchanged over TCP/IP.</para>
			<note><para>To understand JBoss bind options look at 
			<ulink url="http://docs.jboss.org/jbossas/docs/Installation_And_Getting_Started_Guide/5/html_single/index.html">Installation_And_Getting_Started_Guide</ulink> </para> </note>
				
		</section>			
		<section id="configuring_SS7Service">
			<title>Configuring SS7Service</title>
			<para> 
				<literal>SS7Service</literal> acts as core engine binding all the components together. 
			</para>
			<programlisting language="XML" role="XML"><![CDATA[	<!-- ==================================================================== -->
	<!-- Mobicents SS7 Service -->
	<!-- ==================================================================== -->
	<bean name="SS7Service" class="org.mobicents.ss7.SS7Service">
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name=
		      "org.mobicents.ss7:service=SS7Service",
		      exposedInterface=org.mobicents.ss7.SS7ServiceMBean.class,
		      registerDirectly=true)</annotation>
		<property name="jndiName">java:/mobicents/ss7/sccp</property>
		<property name="stack">
			<inject bean="SccpStack" property="sccpProvider" />
		</property>
	</bean>]]></programlisting>		
			<para> SS7 service binds SccpProvider to JNDI <literal>java:/mobicents/ss7/sccp</literal>. 
			The JNDI name can be configured to any valid JNDI name specific to your application.</para>
		</section>			
	</section>
		
		
<!-- Configuring Signaling Gateway -->		
	
		
	<section
		id="source_code">
		<title>
			Setup from source
		</title>
		<para>&THIS.PLATFORM; &THIS.APPLICATION; is an open source project, instructions for building from source are part of the manual! 
		Building from source means you can stay on top with the latest features. Whilst aspects of &THIS.PLATFORM; &THIS.APPLICATION; are quite 
		complicated, you may find ways to become contributors.</para>
		
		<para>&THIS.PLATFORM; &THIS.APPLICATION; works with JDK1.5 and above (If using M3UA, JDK1.7 and above ). you will also need to have the following tools installed. 
		Minimum requirement version numbers provided.</para>
		
		<itemizedlist>
			<listitem>
				<para><literal>Subversion Client 1.4</literal> : Instructions for using SVN, including install, can be found at <ulink
								url="http://subversion.tigris.org" /></para>
			</listitem>
			<listitem>
				<para><literal>Maven 2.0.9</literal> : Instructions for using Maven, including install, can be found at <ulink
								url="http://maven.apache.org/" /></para>
			</listitem>	
			<listitem>
				<para><literal>Ant 1.7.0</literal> : Instructions for using Ant, including install, can be found at <ulink
								url="http://ant.apache.org" /></para>
			</listitem>	
		</itemizedlist>

		<section
			id="source_building">
			<title>Release Source Code Building</title>
			<procedure>
				<step>
					<title>Downloading the source code</title>
					
					<para>Use SVN to checkout a specific release source, the base URL is &THIS.RELEASE_SOURCE_CODE_URL;,
						then add the specific release version, lets consider &THIS.VERSION;.
					</para>
					<programlisting>[usr]$ svn co &THIS.RELEASE_SOURCE_CODE_URL;/&THIS.APPLICATION.DIRNAME;-&THIS.VERSION;</programlisting>
				
				</step>
				<step>
					<title>Building the source code</title>
					<para>Now that we have the source the next step is to build and install the source. 
					&THIS.PLATFORM; &THIS.APPLICATION; uses Maven 2 to build the system. There are two profiles. Default one builds only java source. The other profile 
					"dialogiclinux" additionaly compile native modules.</para>
					<note>
						<para>
							Native modules are supported only for linux OS for now.
						</para>
					</note>		
					<!-- 			
					<para>Use "dahdilinux" profile if linux server on which this code is built already has dahdi module installed. 
					Make sure you pass "include.zap" system property pointing to correct directory where dahdi is installed</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install -Pdahdilinux -Dinclude.zap=/usr/include/dahdi
				    </programlisting>
				     -->
					<para>Use "dialogiclinux" profile if linux server on which this code is built already has dialogic module installed. 
					Make sure you pass "include.dialogic" and "include.dialogic.gctlib" system property pointing to correct directory where 
					dialogic libraries are installed. include.dialogic.gctlib points to directory where <literal>gctload</literal> is present (generally
					/opt/dpklnx for linux OS)</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install -Pdialogclinux -Dinclude.dialogic=/opt/dpklnx/INC -Dinclude.dialogic.gctlib=/opt/dpklnx
				    </programlisting>	
				    
				   	<para>To build &THIS.PLATFORM; &THIS.APPLICATION; without building any native libraries use</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install 
				    </programlisting>
					<note>
						<para>
							If you are using &THIS.PLATFORM; &THIS.APPLICATION; without any native dependencies, &THIS.PLATFORM; &THIS.APPLICATION; can run on any OS.
						</para>
					</note>
									    
							    
					<para>Use Ant to build the binary .</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/release
[usr]$ ant
				    </programlisting>

				</step>
			</procedure>
		</section>

		<section
			id="trunk_source_building">
			<title>Development Trunk Source Building</title>
			<para>
				Similar process as for
				<xref
					linkend="source_building" />,
				the only change is the SVN source code URL, which is &THIS.TRUNK_SOURCE_CODE_URL;.
			</para>
		</section>

	</section>
</chapter>

