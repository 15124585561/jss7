<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter
	id="tcap">

	<title>TCAP</title>
	<para>
		The Transaction Capabilities Application Part (TCAP) is defined in ITU-T Recommendations Q.771-Q.775.
		TCAP allows services at network nodes to communicate with each other using an agreed-upon set of data elements.
		Its primary purpose is to facilitate multiple concurrent dialogs between the same sub-systems on the same machines, 
		using Transaction IDs to differentiate these, similar to the way TCP ports facilitate multiplexing connections between 
		the same IP addresses on the Internet.
	</para>
	<section>
		<title>&THIS.PLATFORM; &THIS.APPLICATION; TCAP Usage</title>
		<para>
			The <classname>org.mobicents.protocols.ss7.tcap.api.TCAPStack</classname> interface defines the methods required to represent TCAP
			Protocol Stack. TCAPStack exposes <classname>org.mobicents.protocols.ss7.tcap.api.TCAPProvider</classname> that interacts directly
			with TCAPStack. TCAPProvider defines methods that will be used by TCAP User Part to create new 
			<classname>org.mobicents.protocols.ss7.tcap.api.tc.dialog.Dialog</classname> to be sent across network.
			TCAP User Part also allows to register<classname>org.mobicents.protocols.ss7.tcap.api.TCListener</classname> to listen TCAP messages.
		</para>
		<para>
			TCAPProvider also exposes <classname>org.mobicents.protocols.ss7.tcap.api.DialogPrimitiveFactory</classname> to create dialog primitives 
			and <classname>org.mobicents.protocols.ss7.tcap.api.ComponentPrimitiveFactory</classname> to create components. 
			Components are a means of invoking an operation at a remote node
		</para>
		
		<para>
			The UML Class Diagram looks like
		</para>
		
	
		<mediaobject
			id="tcap_classdia">
			<imageobject>
				<imagedata
					width="300px"
					align="center"
					fileref="images/TCAPClassDiagram.png"
					format="PNG" />
			</imageobject>
			<caption>
				<para>&THIS.PLATFORM; &THIS.APPLICATION; TCAP Class Diagram
				</para>
			</caption>
		</mediaobject>	
		
		<para>
			The <classname>org.mobicents.protocols.ss7.tcap.TCAPStackImpl</classname> is concrete implementation of <classname>TCAPStack</classname>. 
			The TCAP User Part creates instance of <classname>TCAPStackImpl</classname> passing the reference of <classname>SccpProvider</classname> and 
			new instance of <classname>SccpAddress</classname> representing address to which bind listener. The <literal>TCAP</literal> stack creates internaly &THIS.PLATFORM; <literal>MAP</literal> Stack implementation.
			Passed <literal>SccpAddress</literal> is used to match against incoming messages destination address.		
		</para>		
		
		<programlisting
			language="Java"
			role="JAVA"><![CDATA[	
			SccpProvider sccpProvider = getSccpProvider(); //JNDI lookup of SCCP Stack and get Provider
			SccpAddress localAddress createLocalAddress();		
	
	        TCAPStack tcapStack = new TCAPStackImpl(sccpPprovider, localAddress);
	
			  
	        ...
	        
	        private SccpAddress createLocalAddress()
	        {
		 		
		        return new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 1, null, 8);
	        }
	
			]]>
		</programlisting>		
		<para>The reference to <classname>SccpProvider</classname> is received from <classname>SccpStack</classname>. 
		To get handle to <classname>SccpStack</classname> do the JNDI look-up passing the 
		JNDI name configured in SS7 service as explained in <xref linkend="sccp_access_point"/> </para>	
		
		<para>The TCAP User Part should register the concrete implementation of 
			<classname>TCListener</classname> with <classname>TCAPProvider</classname> to listen for incoming TCAP messages.
		</para>
		
		<programlisting
			language="Java"
			role="JAVA"><![CDATA[
	public class Client implements TCListener{
			.....		
			tcapProvider = tcapStack.getProvider();
	        tcapProvider.addTCListener(this);
	        ....
	}        		
			]]>
		</programlisting>		
		
	<para>The TCAP User Part leverages TCAPProvider to create new Dialog. The component's between the nodes
		are exchanged within this Dialog
	</para>
	
	<programlisting
		language="Java"
		role="JAVA"><![CDATA[
		clientDialog = this.tcapProvider.getNewDialog(thisAddress, remoteAddress);   		
		]]>
	</programlisting>		
	
	<para>
		The TCAP User Part leverages ComponentPrimitiveFactory to create new components. These components are sent usig the dialog 
	</para>		
	
	
	<programlisting
		language="Java"
		role="JAVA"><![CDATA[
		//create some INVOKE
        Invoke invoke = cpFactory.createTCInvokeRequest();
        invoke.setInvokeId(this.clientDialog.getNewInvokeId());
        OperationCode oc = cpFactory.createOperationCode();
        oc.setLocalOperationCode(12L);
        invoke.setOperationCode(oc);
        //no parameter
        this.clientDialog.sendComponent(invoke); 		
		]]>
	</programlisting>
		
	</section>
	
	
	<section>
		<title>&THIS.PLATFORM; &THIS.APPLICATION; TCAP User Part Example</title>
		<para>Below is TCAP User Part example. This example creates dialog and exchanges messages withing structured dialog. Refer to source for function calls:
		</para>
	<programlisting
		language="Java"
		role="JAVA"><![CDATA[	
		
public class Client implements TCListener{
	//encoded Application Context Name
	public static final long[] _ACN_ = new long[] { 0, 4, 0, 0, 1, 0, 19, 2 };
	
	private TCAPStack stack;
	private SccpAddress thisAddress;
	private SccpAddress remoteAddress;
	
	private TCAPProvider tcapProvider;
	private Dialog clientDialog;
	
	Client(SccpProvider sccpPprovider, SccpAddress thisAddress,SccpAddress remoteAddress) {
		super();
		this.stack = new TCAPStackImpl(sccpPprovider,thisAddress); //pass address, so stack can register in SCCP
		this.runningTestCase = runningTestCase;
		this.thisAddress = thisAddress;
		this.remoteAddress = remoteAddress;
		this.tcapProvider = this.stack.getProvider();
		this.tcapProvider.addTCListener(this);
	}

	private static SccpProvider getSccpProvider() throws NamingException {
       ......
       ......
    }

	public void start() throws TCAPException, TCAPSendException {
		clientDialog = this.tcapProvider.getNewDialog(thisAddress, remoteAddress);
		ComponentPrimitiveFactory cpFactory = this.tcapProvider.getComponentPrimitiveFactory();
		
		//create some INVOKE
		Invoke invoke = cpFactory.createTCInvokeRequest();
		invoke.setInvokeId(this.clientDialog.getNewInvokeId());
		
		OperationCode oc = cpFactory.createOperationCode();
        oc.setLocalOperationCode(12L);
        invoke.setOperationCode(oc);
		//no parameter
		this.clientDialog.sendComponent(invoke);
		
		ApplicationContextName acn = this.tcapProvider.getDialogPrimitiveFactory()
			.createApplicationContextName(_ACN_);
		//UI is optional!
		TCBeginRequest tcbr = this.tcapProvider.getDialogPrimitiveFactory().createBegin(this.clientDialog);
		tcbr.setApplicationContextName(acn);
		this.clientDialog.send(tcbr);
	}

	public void onDialogReleased(Dialog d)
	{
		d.keepAlive();
	}


	public void onInvokeTimeout(Invoke tcInvokeRequest)
	{
	}

	
	public void onDialogTimeout(Dialog d)
	{
	}

	public void onTCBegin(TCBeginIndication ind) {
		
		
	}

	public void onTCContinue(TCContinueIndication ind) {

		//send end
		TCEndRequest end = this.tcapProvider.getDialogPrimitiveFactory().createEnd(ind.getDialog());
		end.setTermination(TerminationType.Basic);
		try {
			ind.getDialog().send(end);
			
		} catch (TCAPSendException e) {
			throw new RuntimeException(e);
		}
	}

	public void onTCEnd(TCEndIndication ind) {
		//should not happen, in this scenario, we send data.
	}

	public void onTCUni(TCUniIndication ind) {
		//not going to happen
	
	}


	public void onTCPAbort(TCPAbortIndication ind) {
		// TODO Auto-generated method stub
		
	}

	public void onTCUserAbort(TCUserAbortIndication ind) {
		// TODO Auto-generated method stub
		
	}
	
	
	public static void main(String[] args)
	{

	    SccpAddress localAddress = new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 1, null, 8);
	    
	   
	    SccpAddress remoteAddress = new SccpAddress(RoutingIndicator.ROUTING_BASED_ON_DPC_AND_SSN, 2, null, 8);
		Client c = new Client(getSccpProvider(),localAddress,remoteAddress);
	}
	
}

		]]>
		</programlisting>
	</section>
</chapter>