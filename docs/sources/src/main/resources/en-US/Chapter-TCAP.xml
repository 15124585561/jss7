<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter
	id="tcap">

	<title>TCAP
	</title>
	<para>
		<literal>TCAP</literal>
		stack runs on top of
		<literal>SCCP</literal>
		. It requires
		<literal>SS7 Service</literal>
		deployed to access
		<literal>SCCP</literal>
		access point. Starting
		<literal>TCAP</literal>
		stack can be done as follows:
	</para>
	<programlisting
		language="Java"
		role="JAVA"><![CDATA[	
		
public class Client implements TCListener{
	//encoded Application Context Name
	public static final long[] _ACN_ = new long[] { 0, 4, 0, 0, 1, 0, 19, 2 };
	
	private TCAPStack stack;
	private SccpAddress thisAddress;
	private SccpAddress remoteAddress;
	
	private TCAPProvider tcapProvider;
	private Dialog clientDialog;
	
	Client(SccpProvider sccpPprovider, SccpAddress thisAddress,SccpAddress remoteAddress) {
		super();
		this.stack = new TCAPStackImpl(sccpPprovider,thisAddress); //pass address, so stack can register in SCCP
		this.runningTestCase = runningTestCase;
		this.thisAddress = thisAddress;
		this.remoteAddress = remoteAddress;
		this.tcapProvider = this.stack.getProvider();
		this.tcapProvider.addTCListener(this);
	}

	private static SccpProvider getSccpProvider()
           throws NamingException
 	{	
 		//no arg is ok, if we run in JBoss
	 	InitialContext ctx = new InitialContext();
	 	
 	   	try{
 	   	
	 	 	String adapterName = "jmx/invoker/RMIAdaptor";
	 	   
	 	 	Object obj = ctx.lookup(adapterName);
	 	 	
	 	   
	 	 	if (!(obj instanceof RMIAdaptor))
	 	 	{
	 	 	 	throw new ClassCastException
	 	 	 	("Object not of type: RMIAdaptorImpl, but: " +
	 	 	 	(obj == null ? "not found" : obj.getClass().getName()));
	 	 	}
			 //SS7Service is JMX bean, lets use it to get 
	  		MBeanServerConnection con = createMBeanServerConnection();
	  		ObjectName on = new ObjectName("org.mobicents.ss7:service=SS7Service");
	  	
	    	String providerJndiName = con.invoke(on,"getJndiName",null,null);
	    	InitialContext ctx = new InitialContext();
	 	 	return (SccpProvider) ctx.lookup(providerJndiName);
	 	 }finally
	 	 {
	 	 	ctx.close();
	 	 }
    }
   

	public void start() throws TCAPException, TCAPSendException
	{
		clientDialog = this.tcapProvider.getNewDialog(thisAddress, remoteAddress);
		ComponentPrimitiveFactory cpFactory = this.tcapProvider.getComponentPrimitiveFactory();
		
		//create some INVOKE
		Invoke invoke = cpFactory.createTCInvokeRequest();
		invoke.setInvokeId(this.clientDialog.getNewInvokeId());
		
		invoke.setOperationCode(cpFactory.createOperationCode(true,new Long(12)));
		//no parameter
		this.clientDialog.sendComponent(invoke);
		
		ApplicationContextName acn = this.tcapProvider.getDialogPrimitiveFactory()
			.createApplicationContextName(_ACN_);
		//UI is optional!
		TCBeginRequest tcbr = this.tcapProvider.getDialogPrimitiveFactory().createBegin(this.clientDialog);
		tcbr.setApplicationContextName(acn);
		this.clientDialog.send(tcbr);
	}
	
	public void dialogReleased(Dialog d) {
	
		
	}

	public void onInvokeTimeout(Invoke tcInvokeRequest) {
	
	}

	public void onTCBegin(TCBeginIndication ind) {
		
		
	}

	public void onTCContinue(TCContinueIndication ind) {

		//send end
		TCEndRequest end = this.tcapProvider.getDialogPrimitiveFactory().createEnd(ind.getDialog());
		end.setTermination(TerminationType.Basic);
		try {
			ind.getDialog().send(end);
			
		} catch (TCAPSendException e) {
			throw new RuntimeException(e);
		}
	}

	public void onTCEnd(TCEndIndication ind) {
		//should not happen, in this scenario, we send data.
	}

	public void onTCUni(TCUniIndication ind) {
		//not going to happen
	
	}


	public void onTCPAbort(TCPAbortIndication ind) {
		// TODO Auto-generated method stub
		
	}

	public void onTCUserAbort(TCUserAbortIndication ind) {
		// TODO Auto-generated method stub
		
	}
	
	
	public static void main(String[] args)
	{
	
		int translationType = 0;
	    int subSystemNumber = 0; 
	    GlobalTitle gt = GlobalTitle.getInstance(translationType,NumberingPlan.ISDN_MOBILE,NatureOfAddress.NATIONAL, "1234");
	    SccpAddress localAddress = new SccpAddress(gt,0);
	    
	    gt = GlobalTitle.getInstance(translationType,NumberingPlan.ISDN_MOBILE,NatureOfAddress.NATIONAL, "1572582");
	    SccpAddress remoteAddress = new SccpAddress(gt,0);
		Client c = new Client(getSccpProvider(),localAddress,remoteAddress);
	}
	
}

		]]>
		</programlisting>
</chapter>