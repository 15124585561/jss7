<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter
	id="setup">
	<title>Installation and Running</title>
	<section
		id="installing_and_using">
		<title>Installing</title>
		<para>&THIS.PLATFORM; SS7 stack at its core requires only Java if you are using only <literal>M3UA</literal>. 
		However if you plan to use <literal>dahdi</literal> or <literal>dialogic</literal> SS7 hardware, respective SS7 cards 
		needs to be installed on the server along with native libraries.</para>
		
		<para>A simple way to get started is to download and install binary. This will provide you with all the dependencies you need to get going. 
		You can obtain binary release from &THIS.RELEASE_BINARY_URL;
		</para>

		<section
			id="dependencies">
			<title>Binary</title>
			<para>The &THIS.PLATFORM; &THIS.APPLICATION; binary is broken down into a few modules.</para>
			<para>The following is a description of the important services and libraries that make up &THIS.PLATFORM; &THIS.APPLICATION;</para>
			<itemizedlist>
				<listitem>
					<para><literal>asn</literal> : Abstract Syntax Notation One (ASN.1) library is used by various &THIS.PLATFORM; &THIS.APPLICATION;
					protocols to encode/decode the structured data exchanged between Signaling Point over networks. To know more about asn library refer to 
					document included with asn. Applications using any of the &THIS.PLATFORM; &THIS.APPLICATION; User Protocols may never need to call asn API directly,
					however it must be in classpath as &THIS.PLATFORM; &THIS.APPLICATION; User Protocols refers this library.</para>
				</listitem>
				<!-- 
				<listitem>
					<para><literal>stream</literal> : All I/O operation within &THIS.PLATFORM; &THIS.APPLICATION; is asynchronous. 
					Stream API enables the user to abstract I/O operation. To know more about stream library refer to 
					document included with stream. 
					</para>
				</listitem>
				 -->
				<listitem>
					<para><literal>ss7</literal> : ss7 contains the service that is deployed in JBoss AS and libraries that end applications refers to.
					It also includes &THIS.PLATFORM; Signaling Gateway.
					The sub-modules included in ss7 are 
					</para>
					<itemizedlist>
						<listitem>
							<para><literal>docs</literal> : User guide for &THIS.PLATFORM; &THIS.APPLICATION; </para>
						</listitem>
						<listitem>
							<para><literal>mobicents-sgw</literal> : Standalone Signaling Gateway as explained in section 
							<xref linkend="mobicents_signaling_gateway" /> </para>
							<para>mobicents-sgw binary has following layout:</para>
							<mediaobject id="binary_sgw">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/sgw-binary.png" format="PNG" />
								</imageobject>
							</mediaobject>
														
						</listitem>							
						<listitem>
							<para><literal>mobicents-ss7-service</literal> : SS7 service is the core engine as explained in section 
							<xref linkend="design_overview_ss7_service" /> </para>
							
							<para>mobicents-ss7-service binary has following layout:</para>
							<mediaobject id="binary_ss7-service">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/binary-ss7-service.png" format="PNG" />
								</imageobject>
							</mediaobject>							
						</listitem>			
						<listitem>
							<para><literal>native</literal> : native libraries component to interact with SS7 Card installed on server, runtime component. 
							As of now native libraries are compiled only for linux OS. However if you plan to use <literal>M3UA</literal> there is 
							no dependency on OS as everything is 100% java.</para>
						</listitem>	
						<listitem>
							<para><literal>protocols</literal> : The &THIS.PLATFORM; &THIS.APPLICATION; User Protocols libraries. Your application would directly 
							call the API's exposed by these libraries. Depending on application you may be either interested in <literal>TCAP</literal>, 
							<literal>MAP</literal> or both or <literal>ISUP</literal> libraries</para>
						</listitem>	
						<listitem>
							<para><literal>shell</literal> : the Command Line Interface (CLI) module to manage the &THIS.PLATFORM; &THIS.APPLICATION;.
							Refer <xref linkend="shell"/> to understand how to use shell</para>
						</listitem>	
					</itemizedlist>
				</listitem>				
				<!-- <listitem> <para>&THIS.PLATFORM; <literal>M3UA</literal> library </para> </listitem> -->
			</itemizedlist>
			<para>Binary release has following layout:</para>
			<mediaobject id="binary_layout">
				<imageobject>
					<imagedata width="300px" align="center" fileref="images/binnar-structure.png" format="PNG" />
			</imageobject>
			<caption>
				<para>&THIS.PLATFORM; &THIS.APPLICATION; binary layout.
				</para>
			</caption>
		</mediaobject>			
		</section>
	</section>

		<section
			id="installing_binary">
			<title>Installing &THIS.PLATFORM; SS7 Service Binary</title>
			<para>The upper layers of Mobicents SS7 viz., TCAP, MAP depends on &THIS.PLATFORM; SS7 Service and &THIS.PLATFORM; SS7 Service
			must be installed before upper layers can be used. The &THIS.PLATFORM; SS7 Service binary requires that you have 
			JBoss Application Server installed and JBOSS_HOME system property set. To know further details on setting JBOSS_HOME look 
			<xref linkend="jboss_home_setup" /> </para>
			
			<para>Once JBOSS_HOME is properly set, use ant to deploy the mobicents-ss7-service, shell scripts and shell library.</para>
			<important>
						<para>
							Ant 1.6 (or higher) is used to install the binary. Instructions for using Ant, including install, can be found at <ulink url="http://ant.apache.org/" /></para>
			</important>
			<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant deploy
			</programlisting>
			<para>To undeploy these services</para>
			<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant undeploy
			</programlisting>		
			
			<para>
				While above steps will deploy the necessary ss7 service and shell components, the <literal>java.library.path</literal>
				should be set to point the directory containing native component or should be copied to JBoss native library path manually. 
				This step is only required if you are using the SS7 board on server.  
			</para>	
		</section>



		<section
			id="running_binary">
			<title>Running &THIS.PLATFORM; SS7 Service</title>
			<para>
				Starting or stopping &THIS.PLATFORM; SS7 Service is no different than starting or stopping JBoss Application Server
			</para>
			<section
				id="starting_binary">
				<title>Starting</title>
				<para>
					Once installed, you can run server by executing the run.sh (Unix) or run.bat (Microsoft Windows)
					startup scripts in the <filename>&lt;install_directory&gt;/bin</filename> directory (on Unix or Windows). 
					If the service started properly you should see following lines in the Unix terminal or Command Prompt depending on your environment:
				</para>
				<screen><![CDATA[
23:22:26,079 INFO  [LinksetManager] SS7 configuration file path /home/abhayani/workarea/mobicents/jboss-5.1.0.GA/server/default/data/linksetmanager.xml
23:22:26,141 INFO  [LinksetManager] Started LinksetManager
23:22:26,199 INFO  [SS7Service] Starting SCCP stack...
23:22:26,229 INFO  [SccpStackImpl] Starting ...
23:22:26,230 INFO  [RouterImpl] SCCP Router configuration file: /home/abhayani/workarea/mobicents/jboss-5.1.0.GA/server/default/deploy/mobicents-ss7-service/sccp-routing.txt
23:22:26,261 INFO  [SS7Service] SCCP stack Started. SccpProvider bound to java:/mobicents/ss7/sccp
23:22:26,261 INFO  [ShellExecutor] Starting SS7 management shell environment
23:22:26,270 INFO  [ShellExecutor] ShellExecutor listening at /127.0.0.1:3435
23:22:26,270 INFO  [SS7Service] [[[[[[[[[ Mobicents SS7 service started ]]]]]]]]]
]]>
				</screen>	
				
				<para>If you have started &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; for the first time, <literal>SS7</literal> is not configured. 
				You need to use Shell Client to connect to &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; as defined in 
				<xref linkend="shell" /> . With <literal>CLI</literal> you can configure how service interacts with SS7 network, that is you configure either installed SS7 card and its native library\
				, or <literal>M3UA</literal> layer.</para>
				
				<para>Once the configured, the state and configuration of <literal>SS7</literal> is persisted which stands server re-start.</para> 
							
			</section>		
			<section
				id="stopping_binary">
				<title>Stopping</title>
					<para>You can shut down the server(s) by executing the <command>shutdown.sh -s</command> (Unix) or 
					<command>shutdown.bat -s</command> (Microsoft Windows) scripts in the <filename>&lt;install_directory&gt;/bin</filename> 
					directory (on Unix or Windows). Note that if you properly stop the server, you will see the following three lines as the 
					last output in the Unix terminal or Command Prompt:</para>
                        <screen><![CDATA[[Server] Shutdown complete
Halting VM]]></screen>

			</section>	
		</section>	

	
	<section id="configuring">
		<title>
			Configuring &THIS.PLATFORM; SS7 Service
		</title>
		<para>Configuration is done through an XML descriptor named <filename>jboss-beans.xml</filename> and is 
		located at <filename>$JBOSS_HOME/server/profile_name/deploy/mobicents-ss7-service/META-INF</filename>, where 
		<application>profile_name</application> is the server profile name.</para>
		
		<para>The &THIS.PLATFORM; SS7 Layer 4 (<literal>SCCP, ISUP</literal>) leverages either of following <literal>MTP</literal> 
		layers to exchange signalling messages with remote signalling points</para>
		
		<itemizedlist>
			<listitem>
				<para><literal>M3UA</literal></para>
			</listitem>
			<listitem>
				<para><literal>dahdi</literal></para>
			</listitem>			
			<listitem>
				<para><literal>dialogic</literal></para>
			</listitem>			
		</itemizedlist>
		
		<para>The ss7 service will be configured with either of these services.</para>
		
		<section id="configuring_Rem_SGW">
			<title>Configuring M3UA</title>
			<para> 
				<literal>ClientM3UAProcess</literal> is only needed if the underlying SS7 service will leverage <literal>M3UA</literal>.
				<literal>ClientM3UAProcess</literal> acts as remote Signaling Gateway Process. <literal>M3UAShellExecutor</literal>
				accepts the <literal>M3UA</literal> commands and executes necessary operations. <literal>ClientM3UAManagement</literal> 
				contains the list of Application Server (AS) (and list  of Application Server Process (ASP) within each AS) connecting 
				to external Signaling Gateway (SG) and also manages them. 
			</para>
			
					<programlisting language="XML" role="XML"><![CDATA[
	<!-- ==================================================================== -->
	<!-- M3UA                                                                 -->
	<!-- ClientM3UAManagement is managing the ASP side commands               -->
	<!-- ==================================================================== -->
	<bean name="ClientM3UAManagement"
		class="org.mobicents.protocols.ss7.m3ua.impl.as.ClientM3UAManagement">
		<property name="persistDir">${jboss.server.data.dir}</property>
	</bean>

	<bean name="M3UAShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UAShellExecutor">
		<property name="m3uaManagement">
			<inject bean="ClientM3UAManagement" />
		</property>
	</bean>

	<bean name="Mtp3UserPart"
		class="org.mobicents.protocols.ss7.m3ua.impl.as.ClientM3UAProcess">
		<property name="clientM3UAManagement">
			<inject bean="ClientM3UAManagement" />
		</property>
	</bean>]]>
                        </programlisting>		
			<para><literal>ClientM3UAManagement</literal> when started looks for file's <filename>m3ua-client.xml</filename> and 
			<filename>m3ua-clientroute.xml</filename>. The <filename>m3ua-client.xml</filename> contains serialized information about 
			AS and ASP configured for this <literal>ClientM3UAProcess</literal>. The <filename>m3ua-clientroute.xml</filename> contains 
			serialized information about defined routes. 
			</para>			
			<para>
				Route maintains the availability status of a remote Point Code in the SS7 network via one or more Signaling Gateways.
				Application Hosts connecting to Signaling Gateways will require the configuration of Routes for each Remote Signaling 
				Point Code they wish to communicate with.
			</para>

		</section>
					
		<section id="configuring_LinksetFactory">
			<title>Configuring dahdi</title>
			<para><literal>Dahdi</literal> based MTP layer will only be used when you have installed dahdi based SS7 hardware (Sangoma or Diguim cards). 
			
			<literal>DahdiLinksetFactory</literal> is responsible to create 
			new instances of corresponding <literal>DahdiLinkset</literal> when instructed by <literal>LinksetManager</literal>. 
			</para>
			
			<itemizedlist>
				<listitem>
					<para><literal>DahdiLinksetFactory</literal> </para>
					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="DahdiLinksetFactory"
		class="org.mobicents.ss7.hardware.dahdi.oam.DahdiLinksetFactory">
	</bean>]]>
                        </programlisting>					
				</listitem>
			</itemizedlist>					
			
			<para> <literal>LinksetFactoryFactory</literal> is just a call-back class listening for new factories deployed 
			and maintains Map of available factory name vs factory. You should never touch this bean.</para>
			
		<section id="configuring_LinksetManager">
			<title>Configuring LinksetManager</title>
			<para> 
				<literal>LinksetManager</literal> is responsible for managing <literal>Linkset</literal> and <literal>Link</literal>.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Linkset manager Service                                              -->
    <!-- ================================================ -->
	<bean name="LinksetManager"
		class="org.mobicents.ss7.linkset.oam.LinksetManager">

		<property name="linksetFactoryFactory">
			<inject bean="LinksetFactoryFactory" />
		</property>
		<property name="persistDir">${jboss.server.data.dir}</property>
	</bean>
	
	<bean name="LinksetExecutor"
		class="org.mobicents.ss7.linkset.oam.LinksetExecutor">
		<property name="linksetManager">
			<inject bean="LinksetManager" />
		</property>
	</bean>]]></programlisting>		
			<para>LinksetManager when started looks for file  <filename>linksetmanager.xml</filename> containing serialized information about 
			underlying linksets and links. The directory path is configurable by changing value of <literal>persistDir</literal> property.</para>
			<warning><para><filename>linksetmanager.xml</filename> should never be edited by hand. Always use Shell Client to connect to 
			&THIS.PLATFORM; &THIS.APPLICATION; and execute commands.</para></warning>	
			<para><literal>LinksetExecutor</literal> accepts the <literal>linkset</literal> commands and executes necessary operations.</para>
		</section>	
		</section>
		
		<section id="configuring_dialogic">
			<title>Configuring dialogic</title>
			<para><literal>Dialogic</literal> based MTP layer will only be used when you have installed Dialogic cards. 
			
			<literal>DialogicMtp3UserPart</literal> communicates with Dialogic hardware. Its asumed here that MTP3 and MTP2 is leveraged from
			Dialogic stack either on-board or on-host. 
			</para>
			

					<programlisting language="XML" role="XML"><![CDATA[
	<!-- ==================================================================== -->
	<!-- Dialogic Mtp3UserPart -->
	<!-- ==================================================================== -->
		<bean name="Mtp3UserPart" class="org.mobicents.ss7.hardware.dialogic.DialogicMtp3UserPart"> 
			<property name="sourceModuleId">61</property> <property name="destinationModuleId">34</property> 
		</bean>]]>
                        </programlisting>					
			
			<para> <literal>sourceModuleId</literal> is source module id and should match with configured in 
			system.txt used by dialogic drivers. Here 61 is assigned for Mobicents process. <literal>destinationModuleId</literal> 
			is destination module id. 34 is Dialogic MTP3 module id.</para>
			</section>
		
		
		<section id="configuring_ShellExecutor">
			<title>Configuring ShellExecutor</title>
			<para> 
				<literal>ShellExecutor</literal> is responsible for listening to incoming command. Received commands are executed on local resources to 
				perform actions like creation and management of <literal>SCCP</literal> routing rule, creation and management of <literal>Linkset</literal>, 
				management of <literal>M3UA</literal> stack.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Shell Service                                                        -->
    <!-- ================================================ -->
	<!-- Define Shell Executor -->
	<bean name="ShellExecutor"
		class="org.mobicents.ss7.ShellExecutor">
		<property name="address">${jboss.bind.address}</property>
		<property name="port">3435</property>
		<!-- LinksetExecutor required only if dahdi based hardware is installed. -->
		<property name="linksetExecutor">
			<inject bean="LinksetExecutor" />
		</property>
		<!-- M3UAShellExecutor required only if M3UA will be leveraged. -->
		<property name="m3UAShellExecutor">
			<inject bean="M3UAShellExecutor" />
		</property>
		<!-- To manage SCCP resource and rules -->
		<property name="sccpExecutor">
			<inject bean="SccpExecutor" />
		</property>
	</bean>]]></programlisting>		
			<para>By default ShellExecutor listens at <literal>jboss.bind.address</literal> and port <literal>3435</literal>. 
			You may set the <literal>address</literal> property to any valid IP address that your host is assigned. 
			The shell commands are exchanged over TCP/IP.</para>
			<note><para>To understand JBoss bind options look at 
			<ulink url="http://docs.jboss.org/jbossas/docs/Installation_And_Getting_Started_Guide/5/html_single/index.html">Installation_And_Getting_Started_Guide</ulink> </para> </note>
				
		</section>	
		
		<section id="configuring_SCCP">
			<title>Configuring SCCP</title>
			<para> 
				As name suggests <literal>SccpStack</literal> initiates the SCCP stack routines. 
				Stack has following properties: 
				
				
				<variablelist>
					<varlistentry>
						<term>localSpc</term>
						<listitem>
							<para>property 
				specifies the local signaling point code.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>ni</term>
						<listitem>
							<para>specifies the network indicator that forms 
				the part of service information octet (SIO)</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Router</term>
						<listitem>
							<para>manages the route for SCCP. When Router is started it looks for file <filename>sccprouter.xml</filename> 
			containing the serialized information about routes configured. The directory path is configurable by changing value of
			<literal>persistDir</literal> property</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>SccpResource</term>
						<listitem>
							<para>manages the remote resource for SCCP, for example Remote Subsystem Number and
			Remote Signalling Pointcode. When SccpResource is started it looks for file <filename>sccpresource.xml</filename> 
			containing the serialized information about resources configured. The directory path is configurable by changing value of
			<literal>persistDir</literal> property</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>mtp3UserPart</term>
						<listitem>
							<para>specifies SS7 Level 3 to be used as transport medium(  be it SS7 card or M3UA)</para>
						</listitem>
					</varlistentry>
				</variablelist>
				
				
			
			</para>

			<para> <literal>SccpExecutor</literal> accepts <literal>sccp</literal> commands and executes necessary operations</para>
			
			<para> <literal>SccpProvider</literal> is bound to JNDI by SS7 Service and is used by upper layers</para>	
			
			
			<programlisting language="XML" role="XML"><![CDATA[	<!-- ==================================================================== -->
	<!-- SCCP Router Service -->
	<!-- ==================================================================== -->
	<!--Define Router for SCCP -->
	<bean name="Router" class="org.mobicents.protocols.ss7.sccp.impl.router.Router">
		<property name="persistDir">${jboss.server.data.dir}</property>
	</bean>

	<bean name="SccpResource" class="org.mobicents.protocols.ss7.sccp.impl.SccpResource">
		<property name="persistDir">${jboss.server.data.dir}</property>
	</bean>

	<bean name="SccpExecutor"
		class="org.mobicents.protocols.ss7.sccp.impl.oam.SccpExecutor">
		<property name="router">
			<inject bean="Router" />
		</property>
		<property name="sccpResource">
			<inject bean="SccpResource" />
		</property>
	</bean>

	<bean name="SccpStack" class="org.mobicents.protocols.ss7.sccp.impl.SccpStackImpl">
		<property name="localSpc">2</property>
		<property name="ni">2</property>
		<property name="router">
			<inject bean="Router" />
		</property>
		<property name="sccpResource">
			<inject bean="SccpResource" />
		</property>
		<property name="mtp3UserPart">
			<inject bean="Mtp3UserPart" />
		</property>
	</bean>

	<bean name="SccpProvider"
		class="org.mobicents.protocols.ss7.sccp.impl.SccpProviderImpl">
		<constructor factoryMethod="getSccpProvider">
			<factory bean="SccpStack" />
		</constructor>
	</bean>]]></programlisting>		
			
		</section>			
		
		<section id="configuring_SS7Service">
			<title>Configuring SS7Service</title>
			<para> 
				<literal>SS7Service</literal> acts as core engine binding all the components together. 
				To get holistic view of SS7 Service look at <xref linkend="design_overview_ss7_service" /> 
			</para>
			<programlisting language="XML" role="XML"><![CDATA[	<!-- ==================================================================== -->
	<!-- Mobicents SS7 Service -->
	<!-- ==================================================================== -->
	<bean name="SS7Service" class="org.mobicents.ss7.SS7Service">
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name=
		      "org.mobicents.ss7:service=SS7Service",
		      exposedInterface=org.mobicents.ss7.SS7ServiceMBean.class,
		      registerDirectly=true)</annotation>
		<property name="jndiName">java:/mobicents/ss7/sccp</property>
		<property name="stack">
			<inject bean="SccpProvider" />
		</property>
	</bean>]]></programlisting>		
			<para> SS7 service binds SccpProvider to JNDI <literal>java:/mobicents/ss7/sccp</literal>. 
			The JNDI name can be configured to any valid JNDI name specific to your application.</para>
		</section>			
	</section>
		
		
<!-- Configuring Signaling Gateway -->		
		<section
			id="installing_sgw_binary">
			<title>Installing &THIS.PLATFORM; Signaling Gateway Binary</title>
			<para>
				&THIS.PLATFORM; Signaling Gateway Binary doesn't require any additional steps. You may copy <literal>mobicents-sgw</literal>
				to any folder of your choice.
			</para>	
		</section>		
		
		
		<section
			id="running_sgw_binary">
			<title>Running &THIS.PLATFORM; Signaling Gateway</title>
			<para>
				In the Linux terminal or Windows command prompt, the
				&THIS.PLATFORM; Signaling Gateway has started successfully if the
				last line of output is similar to the following
			</para>
			<programlisting><![CDATA[15:51:18,247 INFO  [MainDeployer] [[[[[[[[[ Mobicents Signaling Gateway: release.version=]]>&THIS.VERSION; <![CDATA[Started ]]]]]]]]]]]></programlisting>
			
			<section id="starting_sgw_binary">
			<title>Starting &THIS.PLATFORM; Signaling Gateway</title>			
				<procedure>
					<title>
						Running the &THIS.PLATFORM; Signaling Gateway on Linux
					</title>
					<step>
						<para>
							Change the working directory to installation
							directory (the one in which the zip file's
							contents was extracted to)
						</para>
						<screen>downloads]$ cd &quot;mobicents-ss7-&lt;version&gt;/ss7/mobicents-sgw&quot;</screen>
					</step>
					<step>
						<para>
							(Optional) Ensure that the
							<filename>bin/run.sh</filename>
							start script is executable.
						</para>
						<screen>mobicents-sgw$ chmod +x bin/run.sh</screen>
					</step>
					<step>
						<para>
							Execute the
							<filename>run.sh</filename>
							Bourne shell script.
						</para>
						<screen>mobicents-sgw$ ./bin/run.sh</screen>
					</step>
				</procedure>
	
				<procedure>
					<title>
						Running the &THIS.PLATFORM; Signaling Gateway on <productname>Windows</productname>
					</title>
					<step>
						<para>
							Using Windows Explorer, navigate to the <filename>bin</filename> subfolder in the installation directory.
						</para>
					</step>
					<step>
						<para>
							The preferred way to start the &THIS.PLATFORM; Signaling Gateway is from the Command Prompt. The command
							line interface displays details of the startup
							process, including any problems encountered
							during the startup process.
						</para>
						<para>
							Open the Command Prompt via the <guilabel>Start</guilabel> menu and navigate to the correct folder:
						</para>
						<screen>C:\Users\&lt;user&gt;\My	Downloads&gt;cd &quot;mobicents-ss7-&lt;version&gt;\ss7\mobicents-sgw&quot;</screen>
					</step>
					<step>
						<para>
							Start the Gateway by executing one of the following files:
							<itemizedlist>
								<listitem>
									<para>
										<filename>run.bat</filename>
										batch file:
									</para>
									<screen>C:\Users\&lt;user&gt;\My Downloads\mms-standalone&lt;version&gt;&gt;bin\run.bat</screen>
								</listitem>
							</itemizedlist>
						</para>
					</step>
				</procedure>	
			</section>		
			<section id="sgw-Running-alter">
				<title>Start the Gateway With Alternate Configuration</title>
				<para>
					Using <literal>run.sh</literal> without any arguments binds the gateway to <literal>127.0.0.1</literal>. 
					To bind gateway to different ip, pass the ip address as value to <literal>-b</literal> command line option. 
					For example to bind the server to <literal>115.252.103.220</literal>
				</para>
				<screen>mobicents-sgw$ ./bin/run.sh -b 115.252.103.220</screen>
			</section>	
			<section id="sgw-Stopping">
				<title>Stopping</title>
				<para>
					The only option to stop the gateway is by pressing <literal>Ctrl c</literal>  and bringing down the JVM or kill the process.
				</para>
			</section>					
		</section>			
		
	<section id="configuring_sgw">
		<title>
			Configuring &THIS.PLATFORM; Signaling Gateway
		</title>
		<para>Configuration is done through an XML descriptor named <filename>sgw-beans.xml</filename> and is 
		located at <filename>mobicents-sgw/deploy</filename>, </para>
		
		<section id="configuring_SGWP">
			<title>Configuring Signaling Gateway Process</title>
			<para> 
				Signaling Gateway Process that contains the list of Remote Application Server (Rem AS) (and list 
				of Remote Application Server Process (Rem ASP) within each rem AS) connecting to external Application Server (AS).  
				<literal>M3UAShellExecutor</literal> accepts the <literal>M3UA</literal> commands and executes necessary operations.
			</para>
			
					<programlisting language="XML" role="XML"><![CDATA[
    <!-- ================================================ -->
    <!-- Signalling Gateway Process Service               -->
    <!-- ================================================ -->
	<bean name="SgpImpl"
		class="org.mobicents.protocols.ss7.m3ua.impl.sg.SgpImpl">
		<constructor>
			<parameter>${sgw.bind.address}</parameter>
			<parameter>3434</parameter>
		</constructor>
	</bean>

	<bean name="M3UAShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UAShellExecutor">
		<property name="sgp">
			<inject bean="SgpImpl" />
		</property>
	</bean>]]>
                        </programlisting>	
			<para>
				<literal>SgpImpl</literal> listens at ip <literal>${sgw.bind.address}</literal> and port <literal>3434</literal> for incoming
				request from ASP. 
			</para>

		</section>
					
		<section id="sgw_configuring_LinksetFactory">
			<title>Configuring LinksetFactory</title>
			<para> Concrete implementation of <literal>LinksetFactory</literal> is responsible to create 
			new instances of corresponding <literal>Linkset</literal> when instructed by <literal>LinksetManager</literal>. 
			&THIS.PLATFORM; Signaling Gateway defines two linkset factories : </para>
			
			<itemizedlist>
				<listitem>
					<para><literal>DahdiLinksetFactory</literal> </para>
					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="DahdiLinksetFactory"
		class="org.mobicents.ss7.hardware.dahdi.oam.DahdiLinksetFactory">
	</bean>]]>
                        </programlisting>					
				</listitem>
				<listitem>
					<para><literal>DialogicLinksetFactory</literal></para>
					 <programlisting language="XML" role="XML"><![CDATA[
	<bean name="DialogicLinksetFactory"
		class="org.mobicents.ss7.hardware.dialogic.oam.DialogicLinksetFactory">
	</bean>]]>
                        </programlisting>
				</listitem>
			</itemizedlist>					
			<para>Its highly unlikely that you would require both the factories on same gateway. If you have <literal>dahdi</literal> based 
			SS7 card installed, keep <literal>DahdiLinksetFactory</literal> and remove other. If you have <literal>dialogic</literal> based 
			SS7 card installed, keep <literal>DialogicLinksetFactory</literal> and remove other. 
			</para>
			<para> <literal>LinksetFactoryFactory</literal> is just a call-back class listening for new factories deployed 
			and maintains Map of available factory name vs factory. You should never touch this bean.</para>
		</section>	
		<section id="sgw_configuring_LinksetManager">
			<title>Configuring LinksetManager</title>
			<para> 
				<literal>LinksetManager</literal> is responsible for managing <literal>Linkset</literal> and <literal>Link</literal>.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Linkset manager Service                                              -->
    <!-- ================================================ -->
	<bean name="LinksetManager"
		class="org.mobicents.ss7.linkset.oam.LinksetManager">

		<property name="linksetFactoryFactory">
			<inject bean="LinksetFactoryFactory" />
		</property>
		<property name="persistDir">${linkset.persist.dir}</property>
	</bean>
	
	<bean name="LinksetExecutor"
		class="org.mobicents.ss7.linkset.oam.LinksetExecutor">
		<property name="linksetManager">
			<inject bean="LinksetManager" />
		</property>
	</bean>]]></programlisting>		
			<para>LinksetManager when started looks for file  <filename>linksetmanager.xml</filename> containing serialized information about 
			underlying linksets and links. The directory path is configurable by changing value of <literal>persistDir</literal> property.</para>
			<warning><para><filename>linksetmanager.xml</filename> should never be edited by hand. Always use Shell Client to connect to 
			&THIS.PLATFORM; Signaling Gateway and execute commands.</para></warning>	
			<para><literal>LinksetExecutor</literal> accepts the <literal>linkset</literal> commands and executes necessary operations.</para>
		</section>	
		
		<section id="sgw_configuring_ShellExecutor">
			<title>Configuring ShellExecutor</title>
			<para> 
				<literal>ShellExecutor</literal> is responsible for listening to incoming command. Received commands are executed on local resources to 
				perform actions like creation and management of <literal>Linkset</literal>, 
				management of <literal>M3UA</literal> stack.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Shell Service                                                        -->
    <!-- ================================================ -->
	<bean name="ShellExecutor"
		class="org.mobicents.ss7.sgw.ShellExecutor">
		<property name="address">${sgw.bind.address}</property>
		<property name="port">3436</property>
		<property name="linksetExecutor">
			<inject bean="LinksetExecutor" />
		</property>
		<property name="m3UAShellExecutor">
			<inject bean="M3UAShellExecutor" />
		</property>
	</bean>]]></programlisting>		
			<para>By default ShellExecutor listens at <literal>sgw.bind.address</literal> and port <literal>3436</literal>. 
			You may set the <literal>address</literal> property to any valid IP address that your host is assigned. 
			The shell commands are exchanged over TCP/IP.</para>
		</section>	
		
		<section id="sgw_configuring_SGW">
			<title>Configuring SignalingGateway</title>
			<para> 
				<literal>SignalingGateway</literal> acts as core engine binding all the components together. 
			</para>
			<programlisting language="XML" role="XML"><![CDATA[        <!-- ================================================ -->
    <!-- Mobicents Signaling Gateway                                      -->
    <!-- ================================================ -->
	<bean name="SignalingGateway"
		class="org.mobicents.ss7.sgw.SignalingGateway">

		<property name="shellExecutor">
			<inject bean="ShellExecutor" />
		</property>

		<property name="nodalInterworkingFunction">
			<inject bean="NodalInterworkingFunction" />
		</property>

	</bean>]]></programlisting>		
			<para>The <literal>NodalInterworkingFunction</literal> sits between the SS7 netwrok and IP network and routes messages 
			to/from both the MTP3 and the M3UA layer, based on the SS7 DPC or DPC/SI address information</para>
		</section>			
	</section>		
		
	<section
		id="source_code">
		<title>
			Setup from source
		</title>
		<para>&THIS.PLATFORM; &THIS.APPLICATION; is an open source project, instructions for building from source are part of the manual! 
		Building from source means you can stay on top with the latest features. Whilst aspects of &THIS.PLATFORM; &THIS.APPLICATION; are quite 
		complicated, you may find ways to become contributors.</para>
		
		<para>&THIS.PLATFORM; &THIS.APPLICATION; works with JDK1.5 and above (If using M3UA, JDK1.7 and above ). you will also need to have the following tools installed. 
		Minimum requirement version numbers provided.</para>
		
		<itemizedlist>
			<listitem>
				<para><literal>Subversion Client 1.4</literal> : Instructions for using SVN, including install, can be found at <ulink
								url="http://subversion.tigris.org" /></para>
			</listitem>
			<listitem>
				<para><literal>Maven 2.0.9</literal> : Instructions for using Maven, including install, can be found at <ulink
								url="http://maven.apache.org/" /></para>
			</listitem>	
			<listitem>
				<para><literal>Ant 1.7.0</literal> : Instructions for using Ant, including install, can be found at <ulink
								url="http://ant.apache.org" /></para>
			</listitem>	
		</itemizedlist>

		<section
			id="source_building">
			<title>Release Source Code Building</title>
			<procedure>
				<step>
					<title>Downloading the source code</title>
					
					<para>Use SVN to checkout a specific release source, the base URL is &THIS.RELEASE_SOURCE_CODE_URL;,
						then add the specific release version, lets consider &THIS.VERSION;.
					</para>
					<programlisting>[usr]$ svn co &THIS.RELEASE_SOURCE_CODE_URL;/&THIS.APPLICATION.DIRNAME;-&THIS.VERSION;</programlisting>
				
				</step>
				<step>
					<title>Building the source code</title>
					<para>Now that we have the source the next step is to build and install the source. 
					&THIS.PLATFORM; &THIS.APPLICATION; uses Maven 2 to build the system. There are three profiles. Default one builds only java source. The other two profiles 
					available "dahdilinux" and "dialogiclinux" additionaly compile native modules.</para>
					<note>
						<para>
							Native modules are supported only for linux OS for now.
						</para>
					</note>					
					<para>Use "dahdilinux" profile if linux server on which this code is built already has dahdi module installed. 
					Make sure you pass "include.zap" system property pointing to correct directory where dahdi is installed</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install -Pdahdilinux -Dinclude.zap=/usr/include/dahdi
				    </programlisting>
				    
					<para>Use "dialogiclinux" profile if linux server on which this code is built already has dialogic module installed. 
					Make sure you pass "include.dialogic" and "include.dialogic.gctlib" system property pointing to correct directory where 
					dialogic libraries are installed. include.dialogic.gctlib points to directory where <literal>gctload</literal> is present (generally
					/opt/dpklnx for linux OS)</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install -Pdialogclinux -Dinclude.dialogic=/opt/dpklnx/INC -Dinclude.dialogic.gctlib=/opt/dpklnx
				    </programlisting>	
				    
				   	<para>To build &THIS.PLATFORM; &THIS.APPLICATION; without building any native libraries use</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;
[usr]$ mvn install 
				    </programlisting>
					<note>
						<para>
							If you are using &THIS.PLATFORM; &THIS.APPLICATION; without any native dependencies, &THIS.PLATFORM; &THIS.APPLICATION; can run on any OS.
						</para>
					</note>
									    
							    
					<para>Use Ant to build the binary .</para>
					<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/release
[usr]$ ant
				    </programlisting>

				</step>
			</procedure>
		</section>

		<section
			id="trunk_source_building">
			<title>Development Trunk Source Building</title>
			<para>
				Similar process as for
				<xref
					linkend="source_building" />,
				the only change is the SVN source code URL, which is &THIS.TRUNK_SOURCE_CODE_URL;.
			</para>
		</section>

	</section>
</chapter>

